openapi: 3.0.0
info:
  description: 'This document describes the iCAS Sellside API to place ads on iCAS.
    For more information, see the `Documentation` tab.'
  version: '0.119'
  title: 'iCAS Sellside API'
servers:
  - url: 'http://www.mp.dev/api/sellside'
    description: 'Local environment [MP]'
  - url: 'https://internet.mp.qa.icas.io'
    description: 'QA environment [MP]'
  - url: 'https://admarkt.demo.qa-mp.so/api/sellside'
    description: 'Pre-prod (demo) environment [MP]'
  - url: 'https://admarkt.marktplaats.nl/api/sellside'
    description: 'Production environment [MP]'
tags:
  - name: Ads
  - name: Campaigns
  - name: Categories
  - name: Regions
  - name: Reporting
paths:
  # ADS
  '/ad/{adId}':
    get:
      tags:
        - Ads
      summary: 'Get ad by ID'
      description: 'Version 5 has a slightly different backwards-incompatible structure than v3. Version 4 is omitted on purpose. <br>
                   Version 3 works just like v2, except the response body contains an additional field ``statusReasons``. This field is currently used to indicate the reason why a certain ad might be set to a certain status by our system. This could be due to, for example, an action (like new website domain approval) pending from the user, which is a mechanism used to prevent account takeovers from setting the website URL to a malicious one.'
      operationId: getAdById
      parameters:
        - name: adId
          in: path
          description: 'ID of ad to return'
          required: true
          schema:
            type: integer
            format: int64
            example: 1235
      responses:
        '200':
          description: 'Success'
          headers:
            Oauth-Scope:
              description: 'Oauth scopes that are available with the supplied token'
              schema:
                type: string
                example: 'api_ro api_rw'
            Oauth-Scope-Required:
              description: 'The required permission for this particular call'
              schema:
                type: string
                example: 'get_ad'
          content:
            application.sellside.ad-v5+json:
              schema:
                $ref: '#/components/schemas/AdV5Response'
            application/sellside.ad-v3+json:
              schema:
                $ref: '#/components/schemas/AdV3Response'
            application/sellside.ad-v2+json:
              schema:
                $ref: '#/components/schemas/AdV2Response'
        '401':
          description: 'Unauthorized'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 1009
                  text: 'missing token'
                  msg: 'Authorization header is missing or in the wrong format'
        '404':
          description: 'Not Found'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 1004
                  text: 'not found'
                  msg: 'The entity was not found'
        '406':
          description: 'Not Acceptable'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedError'
        '500':
          description: 'Server Error'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 1000
                  text: 'internal error'
                  msg: 'The server encountered an error'
      security:
        - bearerAuth: []
          oAuth2ClientCredentials:
            - 'console_ro'
            - 'api_ro'
    put:
      tags:
        - Ads
      summary: 'Updates the ad with the given ID'
      description: 'Version 3 works just like v2, except the response body contains an additional field statusReasons. This field is currently used to indicate the reason why a certain ad might be set to a certain status by our system. This could be due to, for example, an action (like new website domain approval) pending from the user, which is a mechanism used to prevent account takeovers from setting the website URL to a malicious one.'
      operationId: updateAdById
      parameters:
        - name: adId
          in: path
          description: 'ID of ad to return'
          required: true
          schema:
            type: integer
            format: int64
            example: 1235
      requestBody:
        content:
          application/sellside.ad-v5+json:
            schema:
              $ref: '#/components/schemas/AdV5Request'
          application/sellside.ad-v3+json:
            schema:
              $ref: '#/components/schemas/AdV3Request'
          application/sellside.ad-v2+json:
            schema:
              $ref: '#/components/schemas/AdV2Request'
      responses:
        '200':
          description: 'Success'
          headers:
            Oauth-Scope:
              description: 'Oauth scopes that are available with the supplied token'
              schema:
                type: string
                example: 'api_ro api_rw'
            Oauth-Scope-Required:
              description: 'The required permission for this particular call'
              schema:
                type: string
                example: 'put_ad'
          content:
            application/sellside.ad-v5+json:
              schema:
                $ref: '#/components/schemas/AdV5Response'
            application/sellside.ad-v3+json:
              schema:
                $ref: '#/components/schemas/AdV3Response'
            application/sellside.ad-v2+json:
              schema:
                $ref: '#/components/schemas/AdV2Response'
        '400':
          description: 'Bad Request'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              examples:
                example1:
                  value:
                    - code: 2001
                      text: 'invalid argument'
                      msg: 'must be either ACTIVE, PAUSED or DELETED'
                      field: 'status'
                example2:
                  value:
                    - code: 2002
                      text: 'out of range'
                      msg: 'totalBudget is not within max(category.minBudget, ad.spentBudget) and category.maxBudget'
                      field: 'totalBudget'
                example3:
                  value:
                    - code: 2012
                      text: 'category change not allowed'
                      msg: 'Changing the category of an ad is not allowed'
                      field: 'categoryId'
                example4:
                  value:
                    - code: 2017
                      text: 'ad status change not allowed'
                      msg: 'Changing the status of an ad is not allowed'
                      field: 'status'
                example5:
                  value:
                    - code: 2019
                      text: 'insufficient budget'
                      msg: 'Budget for ad is insufficient'
                      field: 'totalBudget'
                example6:
                  value:
                    - code: 2020
                      text: 'insufficient daily budget'
                      msg: 'Daily budget for ad is insufficient'
                      field: 'dailyBudget'
                example7:
                  value:
                    - code: 2023
                      text: 'category deleted'
                      msg: 'The category has been deleted and will not allow creation/updating of ads'
                      field: 'categoryId'
                example8:
                  value:
                    - code: 2026
                      text: 'too many ads in category'
                      msg: 'Cannot put more ads in this category'
                      field: 'categoryId'
        '401':
          description: 'Unauthorized'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 1009
                  text: 'missing token'
                  msg: 'Authorization header is missing or in the wrong format'
        '404':
          description: 'Not Found'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 1004
                  text: 'not found'
                  msg: 'The entity was not found'
        '406':
          description: 'Not Acceptable'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedError'
        '500':
          description: 'Server Error'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 1000
                  text: 'internal error'
                  msg: 'The server encountered an error'
      security:
        - bearerAuth: []
          oAuth2ClientCredentials:
            - 'console_rw'
            - 'api_rw'
  /ad/{id}/status/{status}:
    put:
      tags:
        - Ads
      summary: 'Updates the status of the ad with the given '
      description: 'To set the new status append it to the base url. <br>
      Changing the status to ACTIVE also changes the number of active ads in this category for this user. 
      If the current number of active ads for this user in this category exceeds ``maxNumberOfActiveAds`` as defined in the category then an error is returned. 
      Setting a different status than ``ACTIVE`` is always allowed.
      If an ad has is in status ``PAUSED`` and also has no daily budget or total budget remaining, this call will succeed. The resulting status of the ad will be either ``BUDGET_REACHED`` or ``DAILY_BUDGET_REACHED``, depending on which budget has run out. 
      In this case the ad will go live as soon as budget is added.
      '
      operationId: postAdStatus
      parameters:
        - name: id
          in: path
          description: 'The ID of the ad for which status update is requested.'
          required: true
          schema:
            type: integer
            format: int64
            example: 42
        - name: status
          in: path
          required: true
          description: 'The desired ad status from a user perspective.'
          schema:
            $ref: '#/components/schemas/AdStatusV2Request' # same as v2
            example: 'PAUSED'
      responses:
        '200':
          description: 'Success'
          headers:
            Oauth-Scope:
              description: 'OAuth scopes that are available with the supplied token'
              schema:
                type: string
                example: 'console_rw api_rw'
            Oauth-Scope-Required:
              description: 'The required permission for this particular call'
              schema:
                type: string
                example: 'put_ad_status'
          content:
            application/sellside.ad-v5+json:
              schema: # Accept header in request, but response empty
            application/json:
              schema: # Accept header in request, but response empty
        '400':
          description: 'Bad Request'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              examples:
                invalidArgument:
                  value:
                    - code: 2001
                      text: 'invalid argument'
                      msg: 'The value of field ''id'' was invalid'
                      field: 'id'
                    - code: 2001
                      text: 'invalid argument'
                      msg: 'The value of field ''status'' was invalid'
                      field: 'status'
                adStatusChangeNotAllowed:
                  value:
                    - code: 2017
                      text: 'ad status change not allowed'
                      msg: 'changing the status of the ad to the provided status is not allowed'
                      field: 'status'
        '404':
          description: 'Not Found'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 1004
                  text: 'not found'
                  msg: 'The entity was not found'
                  field: 'id'
      security:
        - bearerAuth: [ ]
          oAuth2ClientCredentials:
            - 'console_rw'
            - 'api_rw'
  /ad:
    get:
      tags:
        - Ads
      summary: 'Get a list of ads with filter criteria'
      description: 'Returns a list of ads for the current user and the total size of the result set matching the filter criteria. <br>
            <br><br>
            Version 5 is similar to version 3, except for some changes in the Ads data structure and the addition of the ``nextPageToken`` field in the response.
            <br>
            This replaces the usage of the ``offset`` parameter and allows the caller to paginate through a large list of ads more efficiently.
            In essence, it contains encoded information on where the returned result ended, so it can serve as additional filters in the call for 
            the next result set, making that call more efficient. For the very first page, a ``PageToken`` should not be provided. 
            For any following page, callers should use the exact same request with an added ``pageToken`` parameter. 
            The value for the ``pageToken`` parameter for page N+1 is the ``nextPageToken`` field in the response of your call to fetch page N. 
            When a response does not contain a ``nextPageToken``, you have reached the last page of results and there are no more to fetch.
            <br><br>
            Note the difference in naming between response field nextPageToken and request parameter pageToken.
            '
      operationId: getListOfAdsWithFilters
      parameters:
        - name: limit
          in: query
          required: false
          description: 'Limits the number of records returned.'
          schema:
            type: integer
            maximum: 100
            default: 100
          example: 50
        - name: pageToken
          in: query
          required: false
          description: 'Encoded information on where the previous page ended, send this along with the same request to get the next page of results. Scales better than ``offset``.'
          schema:
            type: string
            format: byte
          example: 'eyJpZCI6MTAwMT'
        - name: adIds
          in: query
          required: false
          description: 'List of ad IDs'
          schema:
            type: array
            items:
              type: integer
              format: int64
          example: [11232, 2231, 32453]
        - name: titleKeywords
          in: query
          required: false
          description: 'Case-insensitive filter for a keyword in the title; will include only ads which contain the given keyword in their title.'
          schema:
            type: string
            example: 'fiets'
        - name: status
          in: query
          required: false
          description: 'Filters the result set by the ad status. Should be a comma separated list of possible statuses'
          schema:
            type: array
            uniqueItems: true
            anyOf:
              - enum:
                - 'ACTIVE'
                - 'PAUSED'
                - 'DELETED'
                - 'DELETED_BY_CS'
                - 'SUSPENDED_BY_CS'
                - 'BUDGET_REACHED'
                - 'DAILY_BUDGET_REACHED'
            example:
              - 'ACTIVE'
              - 'PAUSED'
        - name: orderBy
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/OrderByGetAdsParam'
        - name: direction
          in: query
          schema:
            $ref: '#/components/schemas/DirectionGetAdsRequest'
        - name: changedSince
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/ChangedSinceGetAdsRequest'
        - name: remainingBudget
          in: query
          required: false
          description: 'Used to retrieve only ads whose remaining budget (``totalBudget - spentBudget``) is below a given threshold value (absolute number or a percentage).'
          schema:
            - type: number
          examples:
            remainingBudgetAbsoluteNumber:
              value: 34534500
            remainingBudgetPercentage:
              value: 70%
        - name: startDate
          in: query
          required: false
          description: 'Determines the start date of the period to select ads with activity for.'
          schema:
            type: string
            format: date
          example: '2022-12-04'
        - name: endDate
          in: query
          required: false
          description: 'Determines the end date of the period to select ads with activity for. Should represent a date equal to or after the ``startDate``.'
          schema:
            type: string
            format: date
          example: '2023-06-13'
        - name: categoryIds
          in: query
          required: false
          description: 'List of category IDs to filter by. Only leaf category id’s are useful, since ads can only be placed in leaf categories.'
          schema:
            type: array
            items:
              type: integer
              format: int64
          example: [55500, 1280000]
        - name: _include
          in: query
          required: false
          description: 'Comma-separated-list of ad fields to include.'
          schema:
            type: array
            items:
              uniqueItems: true
              anyOf:
                - enum:
                    - 'id'
                    - 'title'
                    - 'description'
                    - 'categoryId'
                    - 'status'
                    - 'price'
                    - 'bidMicros'
                    - 'budgets'
                    - 'salutation'
                    - 'sellerName'
                    - 'postcode'
                    - 'regionId'
                    - 'phoneNumber'
                    - 'allowContactByEmail'
                    - 'dateCreated'
                    - 'dateLastUpdated'
                    - 'vendorId'
                    - 'links'
                    - 'images'
                    - 'attributes'
                    - 'shippingOptions'
              example:
                - 'title'
                - 'description'
                - 'status'
        - name: _exclude
          in: query
          required: false
          description: 'Comma-separated-list of ad fields to omit.'
          schema:
            type: array
            items:
              uniqueItems: true
              anyOf:
                - enum:
                    - 'id'
                    - 'title'
                    - 'description'
                    - 'categoryId'
                    - 'status'
                    - 'price'
                    - 'bidMicros'
                    - 'budgets'
                    - 'salutation'
                    - 'sellerName'
                    - 'postcode'
                    - 'regionId'
                    - 'phoneNumber'
                    - 'allowContactByEmail'
                    - 'dateCreated'
                    - 'dateLastUpdated'
                    - 'vendorId'
                    - 'links'
                    - 'images'
                    - 'attributes'
                    - 'shippingOptions'
              example:
                - 'images'
                - 'attributes'
      responses:
        '200':
          description: 'Success'
          headers:
            Oauth-Scope:
              description: 'Oauth scopes that are available with the supplied token'
              schema:
                type: string
                example: 'api_ro api_rw'
            Oauth-Scope-Required:
              description: 'The required permission for this particular call'
              schema:
                type: string
                example: 'get_ads'
          content:
            application/sellside.ad.list-v5+json:
              schema:
                $ref: '#/components/schemas/AdListV5Response'
            application/sellside.ad.list-v3+json:
              schema:
                $ref: '#/components/schemas/AdListV3Response'
        '401':
          description: 'Unauthorized'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 1009
                  text: 'missing token'
                  msg: 'Authorization header is missing or in the wrong format'
        '406':
          description: 'Not Acceptable'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedError'
        '500':
          description: 'Server Error'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 1000
                  text: 'internal error'
                  msg: 'The server encountered an error'
      security:
        - bearerAuth: []
          oAuth2ClientCredentials:
            - 'console_ro'
            - 'api_ro'
    post:
      tags:
        - Ads
      summary: 'Creates a new ad for the current user.'
      description: '<br>
                   Version 5 has a slightly different backwards-incompatible structure than v3. Version 4 is omitted on purpose. <br>
                   Version 3 works just like v2, except the response body contains an additional field ``statusReasons``. This field is currently used to indicate the reason why a certain ad might be set to a certain status by our system. This could be due to, for example, an action (like new website domain approval) pending from the user, which is a mechanism used to prevent account takeovers from setting the website URL to a malicious one.'
      operationId: postAd
      requestBody:
        required: true
        content:
          application/sellside.ad-v5+json:
            schema:
              $ref: '#/components/schemas/AdV5Request'
            examples:
              manualBidding:
                value:
                  title: 'Brother Fax voor 99,99'
                  description: '<b>NU extra voordelig op ourshop.com.</b> Fax nu voor slechts <b>99,99!</b>'
                  categoryId: 826
                  status: 'ACTIVE'
                  price:
                    priceType: 'FIXED_PRICE'
                    priceUnit: 'per_sqm'
                    amountCents: 5600
                    originalAmountCents: 6500
                  bidMicros: '10000'
                  budgets:
                    daily:
                      limitMicros: 'UNLIMITED'
                    total:
                      limitMicros: '350000000'
                  campaignId: 54212
                  salutation: 'COMPANY'
                  sellerName: 'My Shop'
                  postcode: '1097DN'
                  regionId: 1700195
                  phoneNumber: '0207894561'
                  allowContactByEmail: true
                  vendorId: 'OURSHOP-1423453-34'
                  links:
                    displayUrl: 'www.ourshop.com/Faxes'
                    url: 'http://www.ourshop.com/index.php?param1=value1&amp;param2=value2&amp;param3=value3'
                  images:
                    - src: 'http://www.ourshop.com/img/brother_fax_big.jpg'
                    - src: 'http://www.ourshop.com/img/brother_fax_side.jpg'
                  attributes:
                    - key: 'color'
                      label: 'Kleur'
                      locale: 'nl'
                      type: 'STRING'
                      value: 'Zwart'
                    - key: 'size'
                      label: 'Maat'
                      locale: 'nl'
                      type: 'NUMBER'
                      value: 6
                    - key: 'software'
                      label: 'Software'
                      locale: 'nl'
                      type: 'LIST'
                      value:
                        - 'Apple OSX'
                        - 'Microsoft Windows 7'
                  shippingOptions:
                    - type: 'SHIP'
                      costCents: 495
                      time: '2d-5d'
                    - type: 'PICKUP'
                      pickupLocation: '1097DN'
              autoBidding:
                value:
                  title: 'Brother Fax voor 99,99'
                  description: '<b>NU extra voordelig op ourshop.com.</b> Fax nu voor slechts <b>99,99!</b>'
                  categoryId: 826
                  status: 'ACTIVE'
                  price:
                    priceType: 'FIXED_PRICE'
                    priceUnit: 'per_sqm'
                    amountCents: 5600
                    originalAmountCents: 6500
                  bidMicros: 'AUTOMATIC'
                  budgets:
                    daily:
                      limitMicros: '30000000'
                    total:
                      limitMicros: 'UNLIMITED'
                  campaignId: 54212
                  salutation: 'COMPANY'
                  sellerName: 'My Shop'
                  postcode: '1097DN'
                  regionId: 1700195
                  phoneNumber: '0207894561'
                  allowContactByEmail: true
                  vendorId: 'OURSHOP-1423453-34'
                  links:
                    displayUrl: 'www.ourshop.com/Faxes'
                    url: 'http://www.ourshop.com/index.php?param1=value1&amp;param2=value2&amp;param3=value3'
                  images:
                    - src: 'http://www.ourshop.com/img/brother_fax_big.jpg'
                    - src: 'http://www.ourshop.com/img/brother_fax_side.jpg'
                  attributes:
                    - key: 'color'
                      label: 'Kleur'
                      locale: 'nl'
                      type: 'STRING'
                      value: 'Zwart'
                    - key: 'size'
                      label: 'Maat'
                      locale: 'nl'
                      type: 'NUMBER'
                      value: 6
                    - key: 'software'
                      label: 'Software'
                      locale: 'nl'
                      type: 'LIST'
                      value:
                        - 'Apple OSX'
                        - 'Microsoft Windows 7'
                  shippingOptions:
                    - type: 'SHIP'
                      costCents: 495
                      time: '2d-5d'
                    - type: 'PICKUP'
                      pickupLocation: '1097DN'
          application/sellside.ad-v3+json:
            schema:
              $ref: '#/components/schemas/AdV3Request'
          application/sellside.ad-v2+json:
            schema:
              $ref: '#/components/schemas/AdV2Request'
      responses:
        '201':
          description: 'Created'
        '401':
          description: 'Unauthorized'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 1009
                  text: 'missing token'
                  msg: 'Authorization header is missing or in the wrong format'
        '400':
          description: 'Bad Request'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 1009
                  text: 'missing token'
                  msg: 'Authorization header is missing or in the wrong format'
        '500':
          description: 'Server Error'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 1000
                  text: 'internal error'
                  msg: 'The server encountered an error'
      security:
        - bearerAuth: [ ]
          oAuth2ClientCredentials:
            - 'console_rw'
            - 'api_rw'
  /ad/prefill:
    post:
      tags:
        - Ads
      summary: 'Returns a template for an ad, to be used for prefilling. This template can contain suggestions for title, category, description and attributes.'
      description: 'Retrieving prefill information is possible only for ads from categories that have defined identifying attributes. Identifying attributes are attributes that can uniquely identify advertised items. An example of identifying attribute is ISBN, which can be used to uniquely identify a specific version of a book.'
      operationId: postAdPrefil
      requestBody:
        content:
          aapplication/sellside.ad.template-v1+json:
            schema:
              $ref: '#/components/schemas/AdPrefillTemplateRequest'
      responses:
        '200':
          description: 'Success'
          headers:
            Oauth-Scope:
              description: 'Oauth scopes that are available with the supplied token'
              schema:
                type: string
                example: 'api_ro api_rw'
            Oauth-Scope-Required:
              description: 'The required permission for this particular call'
              schema:
                type: string
                example: 'prefill_ad'
            Location:
              description: 'When the ad is successfully created, this contains the URL location of the ad.'
              schema:
                type: string
                example: '/api/sellside/ad/1234234'
          content:
            application/sellside.ad.template-v1+json:
              schema:
                $ref: '#/components/schemas/AdPrefillTemplateResponse'
        '401':
          description: 'Unauthorized'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 1009
                  text: 'missing token'
                  msg: 'Authorization header is missing or in the wrong format'
        '400':
          description: 'Bad Request'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 1009
                  text: 'missing token'
                  msg: 'Authorization header is missing or in the wrong format'
        '406':
          description: 'Not Acceptable'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedError'
              examples:
                typeMismatch:
                  value:
                    - code: 1006
                      text: 'type mismatch'
                      msg: 'The type of field ''categoryId'' does not match'
                      field: 'categoryId'
                missingArgument:
                  value:
                    - code: 2000
                      text: 'missing argument'
                      msg: 'The field ''categoryId'' was missing'
                      field: 'categoryId'
                invalidArgument:
                  value:
                    - code: 2001
                      text: 'invalid argument'
                      msg: 'The value of field ''categoryId'' was invalid'
                      field: 'categoryId'
                categoryPrefillNotSupported:
                  value:
                    - code: 2029
                      text: 'category prefill not supported'
                      msg: 'Prefill is not supported for the category'
                      field: 'categoryId'
                MissingIdentifyingAttribute:
                  value:
                    - code: 2030
                      text: 'missing identifying attribute'
                      msg: 'Missing one of the identifying attributes: licensePlate'
                      field: 'attributes'
        '500':
          description: 'Server Error'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 1000
                  text: 'internal error'
                  msg: 'The server encountered an error'
      security:
        - bearerAuth: []
          oAuth2ClientCredentials:
            - 'console_rw'
            - 'api_rw'
  /ad/{id}/funnel:
    get:
      tags:
        - Ads
      summary: 'Get performance funnel for an ad.'
      description: 'Returns performance predictions such as number of impressions, clicks and url clicks for a given ad and cpc value.<br>
      The endpoint also returns information regarding the current page on which the ad is displayed (``pageNumber``) and the required cpc value which would place the ad on page one (``averageCpc``). If ``cpc`` is greater than ``maxCpc`` then this ad does not perform well enough to be placed on page one. <br>
      The ``averageCpc`` field in the response marks the required cpc value to place the ad on page one in its category. We will rename this field in a future version of the endpoint to make this clearer.
      '
      operationId: getAdFunnel
      parameters:
        - name: id
          in: path
          description: 'ID of the ad for which performance funnel is requested.'
          required: true
          schema:
            type: integer
            format: int64
            example: 423920348
        - name: cpc
          in: query
          description: 'The CPC value in euro cents for which to make the prediction.'
          required: true
          schema:
            type: number
            format: int64
            minimum: 1
            example: 50
        - name: _include
          in: query
          required: false
          description: 'Comma-separated-list of ad fields to include.'
          schema:
            type: array
            items:
              uniqueItems: true
              anyOf:
                - enum:
                    - 'cpc'
                    - 'pageNumber'
                    - 'averageClicks'
                    - 'averageCpc'
                    - 'averageImpressions'
                    - 'averageUrlClicks'
                    - 'ctr'
                    - 'urlCtr'
                    - 'maxCpc'
              example:
                - 'cpc'
                - 'averageClicks'
        - name: _exclude
          in: query
          required: false
          description: 'Comma-separated-list of ad fields to omit.'
          schema:
            type: array
            items:
              uniqueItems: true
              anyOf:
                - enum:
                    - 'cpc'
                    - 'pageNumber'
                    - 'averageClicks'
                    - 'averageCpc'
                    - 'averageImpressions'
                    - 'averageUrlClicks'
                    - 'ctr'
                    - 'urlCtr'
                    - 'maxCpc'
              example:
                - 'averageImpressions'
                - 'urlCtr'
      responses:
        '200':
          description: 'Success'
          headers:
            Oauth-Scope:
              description: 'Oauth scopes that are available with the supplied token'
              schema:
                type: string
                example: 'api_ro console_ro'
            Oauth-Scope-Required:
              description: 'The required permission for this particular call'
              schema:
                type: string
                example: 'get_ad_funnel'
          content:
            application/sellside.funnel-v1+json:
              schema:
                $ref: '#/components/schemas/AdFunnelV1Response'
        '204':
          description: 'No Content'
          headers:
            Oauth-Scope:
              description: 'Oauth scopes that are available with the supplied token'
              schema:
                type: string
                example: 'api_ro console_ro'
            Oauth-Scope-Required:
              description: 'The required permission for this particular call'
              schema:
                type: string
                example: 'get_ad_funnel'
        '400':
          description: 'Bad Request'
          headers:
            Oauth-Scope:
              description: 'Oauth scopes that are available with the supplied token'
              schema:
                type: string
                example: 'api_ro console_ro'
            Oauth-Scope-Required:
              description: 'The required permission for this particular call'
              schema:
                type: string
                example: 'get_ad_funnel'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 2001
                  text: 'invalid argument'
                  msg: 'the value of the field ''cpc'' was invalid'
      security:
        - bearerAuth: [ ]
          oAuth2ClientCredentials:
            - 'console_ro'
            - 'api_ro'
  /ad/mapping/externalids:
    get:
      tags:
        - Ads
      summary: 'Get a map of ad IDs for the user to the externalId the ad has'
      description: 'Returns a map of adIds for the current user to the externalId the ad has. 
      <br>
      This utility call is intended for uncommon usecases, such as when a client on-boards an already existing admarkt user and needs to do a one-time sync of adIds vs externalIds, or other cases where data got lost at the client.
      <br>
      Ads without externalId will not be present in the resulting map.'
      deprecated: true
      parameters:
        - name: status
          description: 'One of the possible Ad Status values to filter on.'
          in: query
          schema:
            type: string
            enum:
              - 'ACTIVE'
              - 'PAUSED'
              - 'BUDGET_REACHED'
              - 'DAILY_BUDGET_REACHED'
              - 'DELETED'
              - 'DELETED_BY_CS'
              - 'SUSPENDED_BY_CS'
              - 'DOMAIN_PENDING'
            default: 'ACTIVE'

        - name: limit
          in: query
          description: 'Limits the number of records returned.'
          schema:
            type: number
            default: 1000
            maximum: 10000
          example: 10
        - name: offset
          in: query
          description: 'Skips the first N records.'
          schema:
            type: number
          example: 5
      responses:
        '200':
          description: 'Success'
          headers:
            Oauth-Scope:
              description: 'Oauth scopes that are available with the supplied token'
              schema:
                type: string
                example: 'api_ro api_rw'
            Oauth-Scope-Required:
              description: 'The required permission for this particular call'
              schema:
                type: string
                example: 'get_ad'
          content:
            application/sellside.ad.external.id.mapping-v2+json:
              schema:
                $ref: '#/components/schemas/AdMappingExternalIdsV2Response'
      security:
        - bearerAuth: [ ]
          oAuth2ClientCredentials:
            - 'console_ro'
            - 'api_ro'
  /ad/byVendor/{vendorId}:
    get:
      tags:
        - Ads
      summary: 'Get ad by vendorId'
      description: 'Returns a single ad with the given ``vendorId``. Version 5 has a slightly different backwards-incompatible structure than v3. Version 4 is omitted on purpose. <br>
        Version 3 works just like v2, except the response body contains an additional field ``statusReasons``. This field is currently used to indicate the reason why a certain ad might be set to a certain status by our system. This could be due to, for example, an action (like new website domain approval) pending from the user, which is a mechanism used to prevent account takeovers from setting the website URL to a malicious one.'
      operationId: getAdByVendorId
      parameters:
        - name: vendorId
          in: path
          description: 'The vendorId of ad to return'
          required: true
          schema:
            type: string
            maxLength: 64
            example: 'OURSHOP-1423453-34'
      responses:
        '200':
          description: 'Success'
          headers:
            Oauth-Scope:
              description: 'Oauth scopes that are available with the supplied token'
              schema:
                type: string
                example: 'api_ro api_rw'
            Oauth-Scope-Required:
              description: 'The required permission for this particular call'
              schema:
                type: string
                example: 'get_ad'
          content:
            application.sellside.ad-v5+json:
              schema:
                $ref: '#/components/schemas/AdV5Response'
            application/sellside.ad-v3+json:
              schema:
                $ref: '#/components/schemas/AdV3Response'
            application/sellside.ad-v2+json:
              schema:
                $ref: '#/components/schemas/AdV2Response'
        '400':
          description: 'Bad Request'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 2005
                  text: 'value too long'
                  msg: 'max. length is 64 characters'
        '401':
          description: 'Unauthorized'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 1009
                  text: 'missing token'
                  msg: 'Authorization header is missing or in the wrong format'
        '404':
          description: 'Not Found'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 1004
                  text: 'not found'
                  msg: 'The entity was not found'
        '406':
          description: 'Not Acceptable'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedError'
        '500':
          description: 'Server Error'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 1000
                  text: 'internal error'
                  msg: 'The server encountered an error'
      security:
        - bearerAuth: []
          oAuth2ClientCredentials:
            - 'console_ro'
            - 'api_ro'
  /image/{id}:
    get:
      tags:
        - Ads
      summary: 'Retrieves an image uploaded via POST /image by the same user.'
      description: 'Images which have not been saved with an ad are removed after 30 minutes.'
      operationId: getImageByID
      parameters:
        - name: id
          in: path
          description: 'A unique identifier of a previously uploaded ad image, that is requested.'
          required: true
          schema:
            type: string
            format: byte
            example: '9beac3db90c27aa8476cb880a362ceba'
        - name: Accept
          in: header
          description: 'The content type of the image to be returned'
          required: true
          schema:
            type: string
            enum: [ 'image/*' ]
      responses:
        '200':
          description: 'Success'
          headers:
            Oauth-Scope:
              description: 'Oauth scopes that are available with the supplied token'
              schema:
                type: string
                example: 'api_ro console_ro'
            Oauth-Scope-Required:
              description: 'The required permission for this particular call'
              schema:
                type: string
                example: 'get_image'
          content:
            image/jpg: {}
        '404':
          description: 'Not Found'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 1004
                  text: 'not found'
                  msg: 'The entity was not found'
                  field: 'id'
      security:
        - bearerAuth: [ ]
          oAuth2ClientCredentials:
            - 'console_ro'
            - 'api_ro'
  /image:
    post:
      tags:
        - Ads
      summary: 'Upload ad images.'
      description: 'The maximum image size is 8MB and the supported image formats are: PNG, GIF, BMP and JPG. <br>
      All images are converted to JPG with maximum dimensions of 1024x1024 while the aspect ratio is maintained.'
      operationId: postImage
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                images:
                  type: array
                  items:
                    type: file
                    format: binary
            example: '...image bytes...'
        required: true
      parameters:
        - name: Accept
          in: header
          description: 'map with the name and a unique identifier for that image. The name is taken from the name parameter of the Content-Disposition header.'
          required: true
          schema:
            type: string
            enum: [ 'image/*' ]
      responses:
        '200':
          description: 'Success'
          headers:
            Oauth-Scope:
              description: 'Oauth scopes that are available with the supplied token'
              schema:
                type: string
                example: 'api_rw console_rw'
            Oauth-Scope-Required:
              description: 'The required permission for this particular call'
              schema:
                type: string
                example: 'post_image'
            Content-Disposition:
              schema:
                type: string
                example: 'form-data; name="image1"; filename="logo.png"'
          content:
            application/sellside.image.list-v1+json:
              schema:
                type: object
                description: 'A map with the name and a unique identifier for each uploaded image.'
                properties:
                  image1:
                    type: string
                    format: url
                    example: 'https://localhost/api/sellside/image/9beac3db90c27aa8476cb880a362ceba/b2c11184b33bdd3e12a1f46152d37a89.jpg'
      security:
        - bearerAuth: [ ]
          oAuth2ClientCredentials:
            - 'console_rw'
            - 'api_rw'

  # CATEGORIES
  /categories:
    get:
      tags:
        - Categories
      summary: 'Returns the a map of id to categories in the format described in the category taxonomy.'
      description: 'The category tree contains all the information about category definitions, attribute definitions and validation rules for placing ads.'
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
            example: 'application/sellside.category.list-v5+json'
          required: true
        - name: categoryIds
          in: path
          description: 'Comma-separated list of IDs for the requested categories from the category taxonomy tree.'
          required: true
          schema:
            type: array
            items:
              type: integer
              format: int64
            example: [ 863,431 ]
        - name: _include
          in: path
          description: 'Comma-separated-list of fields to include. Optional, default is all fields.'
          required: false
          schema:
            type: array
            items:
              type: string
        - name: _exclude
          in: path
          description: 'Comma-separated-list of fields to omit. Optional, default empty.'
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: 'Success'
          headers:
            Oauth-Scope:
              description: 'Oauth scopes that are available with the supplied token'
              schema:
                type: string
                example: 'api_ro api_rw console_ro console_rw'
            Oauth-Scope-Required:
              description: 'The required permission for this particular call'
              schema:
                type: string
                example: 'get_category'
          content:
            application/sellside.category.list-v5+json:
              schema:
                $ref: '#/components/schemas/NonLeafCategoryV5'
        '400':
          description: 'Bad Request'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 2000
                  text: 'missing argument'
                  msg: 'The field ''categoryIds'' was missing'
                  field: 'categoryIds'
      security:
        - bearerAuth: [ ]
          oAuth2ClientCredentials:
            - 'console_ro'
            - 'api_ro'
  /category/{id}:
    get:
      tags:
        - Categories
      summary: 'Returns the category tree or parts of it in the category taxonomy format, starting from the category with the given category id.'
      description: 'To return the category tree starting from the root node use id 0. To retrieve all sub levels specify a sufficiently large number, e.g. 9999.'
      parameters:
        - name: id
          in: path
          description: 'The starting category ID of the taxonomy (sub) tree.'
          required: true
          schema:
            type: integer
            example: 856
        - name: levels
          in: path
          description: 'Specifies how many levels starting from the current one you want to retrieve.'
          required: false
          default: 0
          example: 1
      responses:
        '200':
          description: 'Success'
          headers:
            Oauth-Scope:
              description: 'Oauth scopes that are available with the supplied token'
              schema:
                type: string
                example: 'api_ro console_ro'
            Oauth-Scope-Required:
              description: 'The required permission for this particular call'
              schema:
                type: string
                example: 'get_category'
          content:
            application/sellside.category.list-v5+json:
              schema:
                $ref: '#/components/schemas/NonLeafCategoryV5'
        '400':
          description: 'Bad Request'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 2000
                  text: 'missing argument'
                  msg: 'The field ''id'' was missing'
                  field: 'id'
                - code: 2001
                  text: 'invalid argument'
                  msg: 'The value of field ''levels'' was invalid'
                  field: 'levels'
                  value: -1
      security:
        - bearerAuth: [ ]
          oAuth2ClientCredentials:
            - 'console_ro'
            - 'api_ro'
  /category/{id}/funnel:
    get:
      tags:
        - Categories
      summary: 'Returns performance predictions such as number of impressions, clicks and url clicks for a given category and cpc value.'
      description: 'The endpoint also returns information regarding the page on which a new ad will be displayed if placed in the given category and with the given ``cpc`` value (``pageNumber``). 
      The response also contains a suggested cpc value to place an ad on page one in this category (``averageCpc``). If cpc is greater than ``maxCpc`` then the ads of this seller generally do not perform well enough to place new ads on the first page.'
      parameters:
        - name: id
          in: path
          required: true
          description: 'The starting category ID of the taxonomy (sub) tree.'
          schema:
            type: integer
            example: 856
        - name: regionId
          in: query
          description: 'The region ID for which to make the prediction. MP & TWH users should omit this field.'
          schema:
            type: integer
        - name: cpc
          in: query
          description: 'The cpc value in euro cents for which to make the prediction.'
          required: true
          schema:
            type: integer
            format: int64
            minimum: 2
          example: 50
        - name: _include
          in: query
          required: false
          description: 'Comma-separated-list of ad fields to include.'
          schema:
            type: array
            items:
              uniqueItems: true
              anyOf:
                - enum:
                    - 'cpc'
                    - 'pageNumber'
                    - 'averageClicks'
                    - 'averageCpc'
                    - 'averageImpressions'
                    - 'averageUrlClicks'
                    - 'ctr'
                    - 'urlCtr'
                    - 'maxCpc'
              example:
                - 'cpc'
                - 'averageClicks'
        - name: _exclude
          in: query
          required: false
          description: 'Comma-separated-list of ad fields to omit.'
          schema:
            type: array
            items:
              uniqueItems: true
              anyOf:
                - enum:
                    - 'cpc'
                    - 'pageNumber'
                    - 'averageClicks'
                    - 'averageCpc'
                    - 'averageImpressions'
                    - 'averageUrlClicks'
                    - 'ctr'
                    - 'urlCtr'
                    - 'maxCpc'
              example:
                - 'averageImpressions'
                - 'urlCtr'
      responses:
        '200':
          description: 'Success'
          headers:
            Oauth-Scope:
              description: 'Oauth scopes that are available with the supplied token'
              schema:
                type: string
                example: 'api_ro console_ro'
            Oauth-Scope-Required:
              description: 'The required permission for this particular call'
              schema:
                type: string
                example: 'get_funnel'
          content:
            application/sellside.funnel-v1+json:
              schema:
                $ref: '#/components/schemas/AdFunnelV1Response'
        '400':
          description: 'Bad Request'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 2001
                  text: 'invalid argument'
                  msg: 'The value of field ''cpc'' was invalid'
                  field: 'cpc'
                  value: -1
      security:
        - bearerAuth: [ ]
          oAuth2ClientCredentials:
            - 'console_ro'
            - 'api_ro'

  # REGIONS
  /regions:
    get:
      tags:
        - Regions
      summary: 'Returns the a map of id to regions in the format described in the regions taxonomy.'
      description: 'The region tree contains all the information about region definitions for placing ads.'
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
            example: 'application/sellside.region.list-v1+json'
          required: true
        - name: regionIds
          in: path
          description: 'Comma-separated list of IDs for the requested regions from the regions taxonomy tree.'
          required: true
          schema:
            type: array
            items:
              type: integer
              format: int64
            example: [ 1700093,1700195,1700196 ]
            maxItems: 100
        - name: _include
          in: path
          description: 'Comma-separated-list of fields to include. Optional, default is all fields.'
          required: false
          schema:
            type: array
            items:
              type: string
        - name: _exclude
          in: path
          description: 'Comma-separated-list of fields to omit. Optional, default empty.'
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: 'Success'
          headers:
            Oauth-Scope:
              description: 'Oauth scopes that are available with the supplied token'
              schema:
                type: string
                example: 'api_ro api_rw'
            Oauth-Scope-Required:
              description: 'The required permission for this particular call'
              schema:
                type: string
                example: 'get_region'
          content:
            application/sellside.category.list-v5+json:
              schema:
                $ref: '#/components/schemas/NonLeafRegion'
        '400':
          description: 'Bad Request'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 2000
                  text: 'missing argument'
                  msg: 'The field ''regionIds'' was missing'
                  field: 'regionIds'
      security:
        - bearerAuth: [ ]
          oAuth2ClientCredentials:
            - 'console_ro'
            - 'api_ro'
  /region/{id}:
    get:
      tags:
        - Regions
      summary: 'Returns the region tree or parts of it starting from the node with the given region id.'
      description: 'To return the region tree starting from the root node use id 0. To retrieve all sub levels specify a sufficiently large number, e.g. 9999.'
      parameters:
        - name: id
          in: path
          description: 'The starting region ID of the taxonomy (sub) tree.'
          required: true
          schema:
            type: integer
            example: 1700194
        - name: levels
          in: path
          description: 'Specifies how many levels starting from the current one you want to retrieve.'
          required: false
          default: 0
          example: 1
      responses:
        '200':
          description: 'Success'
          headers:
            Oauth-Scope:
              description: 'Oauth scopes that are available with the supplied token'
              schema:
                type: string
                example: 'api_ro console_ro'
            Oauth-Scope-Required:
              description: 'The required permission for this particular call'
              schema:
                type: string
                example: 'get_category'
          content:
            application/sellside.region.list-v5+json:
              schema:
                $ref: '#/components/schemas/NonLeafRegion'
        '400':
          description: 'Bad Request'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 2000
                  text: 'missing argument'
                  msg: 'The field ''id'' was missing'
                  field: 'id'
                - code: 2001
                  text: 'invalid argument'
                  msg: 'The value of field ''levels'' was invalid'
                  field: 'levels'
                  value: -1
      security:
        - bearerAuth: [ ]
          oAuth2ClientCredentials:
            - 'console_ro'
            - 'api_ro'
        # FEEDS
  /feed/import/{id}/detail:
    get:
      tags:
        - Feeds
      summary: 'Returns a summary of the particular feed import'
      description: 'Provides information on whether there were any errors or warnings associated with a specific import.'
      operationId: getFeedImportDetail
      parameters:
        - name: id
          in: path
          description: 'the import ID for which details are requested'
          schema:
            type: number
            example: 123
            required: true
      responses:
        '200':
          description: 'Success'
          headers:
            Oauth-Scope:
              description: 'Oauth scopes that are available with the supplied token'
              schema:
                type: string
                example: 'api_ro console_ro'
            Oauth-Scope-Required:
              description: 'The required permission for this particular call'
              schema:
                type: string
                example: 'get_feed_import'
          content:
            application/sellside.feedimportdetail-v2+json:
              schema:
                type: object
                readOnly: true
                properties:
                  id:
                    type: number
                    description: 'A unique identifier of the import ID, same as provided in the call'
                    example: 123
                  url:
                    type: string
                    description: 'The URL where the feed was downloaded from.'
                    example: 'http://feed.com/id/5324'
                  status:
                    type: string
                    description: 'The status of the requested feed import. If the feed is currently processing, it will return ``PENDING``. 
                              If it has completed successfully, the status will be ``DONE``. Individual ads could still have failed updating, but the process completed. 
                              If the feed import failed, either because the file could not be downloaded or the feed did not pass validation, the status will be ``REJECTED``, which means NO ads have been processed.'
                    enum:
                      - 'PENDING'
                      - 'DONE'
                      - 'REJECTED'
                    example: 'DONE'
                  dateCreated:
                    type: string
                    format: time
                    description: 'ISO 8601 date of when the feed import was started.'
                    example: '2021-08-31T16:12:53Z'
                  error:
                    type: string
                    description: 'The error affecting the whole feed import, as opposed to ``errors`` containing errors affecting individual ads. If your feed is in status ``REJECTED`` this should have the reason.'
                    example: ""
                  totalRecordsRead:
                    type: number
                    description: 'The total number of ads found in the feed file.'
                    example: 110
                  recordsSucceeded:
                    type: number
                    description: 'The number of ads processed without errors.'
                    example: 106
                  recordsFailed:
                    type: number
                    description: 'The number of ads rejected due to errors.'
                    example: 4
                  recordsWithWarnings:
                    type: number
                    description: 'The number of ads processed with warnings.'
                    example: 10
                  errors:
                    type: object
                    additionalProperties:
                      type: object
                      properties:
                        count:
                          type: number
                          description: 'Total number of ads affected by this error/warning message'
                          example: 4
                        vendorIdsSample:
                          type: array
                          items:
                            type: string
                          description: 'Subset (max 100) of vendorIDs that were affected by this error'
                    example:
                      'price should be lower than originalPrice':
                        count: 4
                        'vendorIdsSample': [ "566", "abc-788","990232","000mcakjn" ]
                  warnings:
                    type: object
                    additionalProperties:
                      type: object
                      properties:
                        count:
                          type: number
                          description: 'Total number of ads affected by this error/warning message'
                          example: 2
                        vendorIdsSample:
                          type: array
                          items:
                            type: string
                          description: 'Subset (max 100) of vendorIDs that were affected by this error'
                    example:
                      'price should be lower than originalPrice':
                        count: 4
                        'vendorIdsSample': [ "vid6778787", "vendorid124" ]
                      'mandatory attribute 240 absent':
                        count: 8
                        "vendorIdsSample": [ "vendorid124","vendorid224" ]
              examples:
                successWarningsErrors:
                  value:
                    id: 123
                    url: 'http://feed.com/id/5324'
                    dateCreated: '2021-08-31T16:12:53Z'
                    status: 'DONE'
                    error: ''
                    totalRecordsRead: 110
                    recordsSucceeded: 106
                    recordsFailed: 4
                    recordsWithWarnings: 10
                    errors:
                      price should be lower than originalPrice:
                        count: 4
                        vendorIdsSample:
                          - '566'
                          - 'abc-788'
                          - '990232'
                          - '000mcakjn'
                    warnings:
                      externalId is deprecated (use only vendorId):
                        count: 2
                        vendorIdsSample:
                          - 'vid6778787'
                          - 'vendorid124'
                      mandatory attribute 240 absent:
                        count: 8
                        vendorIdsSample:
                          - 'vendorid124'
                          - 'vendorid224'
                successXMLValidationRejected:
                  value:
                    id: 123
                    url: 'http://feed.com/id/5324'
                    dateCreated: '2021-08-31T16:12:53Z'
                    status: 'REJECTED'
                    error: 'feed validation failure: invalid feed: parsing xml feed: XML syntax error on line 34: invalid character entity &raquo;'
                    totalCount: 0
                    okCount: 0
                    errorCount: 0
                    warningCount: 0
                    errors: { }
                    warnings: { }
                successURLFetchFailure:
                  value:
                    id: 123
                    url: 'http://feed.com/id/5324.xml'
                    dateCreated: '2021-08-31T16:12:53Z'
                    status: 'REJECTED'
                    error: 'HTTP 404 Not Found for: http://feed.com/id/5324.xml: fetch url failure'
                    totalCount: 0
                    okCount: 0
                    errorCount: 0
                    warningCount: 0
                    errors: { }
                    warnings: { }
      security:
        - bearerAuth: [ ]
          oAuth2ClientCredentials:
            - 'console_ro'
            - 'api_ro'
  /feed/config:
    get:
      tags:
        - Feeds
      summary: 'Returns the feed configuration of the current user'
      description: 'A user can update his or her ads by describing them in an XML document, called **feed**. The system reads all user feeds once per day and synchronizes ads in the system.
      <br><br>
      The feed configuration object contains an ``enabled`` field. It is **true** when the current user has enabled feed publication and **false** otherwise. 
      <br>
      When feed publication is enabled, the feed configuration object contains a field ``feedUrl`` which contains the configured feed url for the current user.
      <br>
      Access to the feed functionality may be granted per user by the Customer Service. 
      '
      operationId: getFeedConfigV1
      responses:
        '200':
          description: 'Success'
          headers:
            Oauth-Scope:
              description: 'Oauth scopes that are available with the supplied token'
              schema:
                type: string
                example: 'api_ro console_ro'
            Oauth-Scope-Required:
              description: 'The required permission for this particular call'
              schema:
                type: string
                example: 'get_feed_config'
          content:
            application/sellside.feedconfig-v1+json:
              schema:
                $ref: '#/components/schemas/FeedConfigV1Response'
        '401':
          description: 'Unauthorized'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 1008
                  text: 'access denied'
                  msg: 'The user is invalid'
      security:
        - bearerAuth: [ ]
          oAuth2ClientCredentials:
            - 'console_ro'
            - 'api_ro'
    post:
      tags:
        - Feeds
      summary: 'Updates the feed configuration of the current user.'
      description: 'The feed configuration object must contain a boolean field ``enabled``. 
      <br>
      Depending on its value the feed will be activated or disabled. If the feed is being activated, the field feedUrl is mandatory and should contain a valid URL to a feed XML document.'
      operationId: postFeedConfigV1
      requestBody:
        required: true
        content:
          application.sellside.feedconfig-v1+json:
            schema:
              $ref: '#/components/schemas/FeedConfigV1Request'
      responses:
        '200':
          description: 'Success'
          headers:
            Oauth-Scope:
              description: 'Oauth scopes that are available with the supplied token'
              schema:
                type: string
                example: 'console_rw api_rw'
            Oauth-Scope-Required:
              description: 'The required permission for this particular call'
              schema:
                type: string
                example: 'post_feed_config'
        '400':
          description: 'Bad Request'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 1008
                  text: 'invalid url'
                  msg: 'The value of field ''feedUrl'' is not a valid url'
      security:
        - bearerAuth: [ ]
          oAuth2ClientCredentials:
            - 'console_rw'
            - 'api_rw'
  /feed/xsd:
    get:
      tags:
        - Feeds
      summary: 'Returns the XSD used to validate feed XML files against.'
      description: 'Users can use this XSD to check their feed XML themselves, instead of just submitting it and waiting for results the next day.'
      operationId: getFeedXSDv1
      responses:
        '200':
          description: 'Success'
          content:
            text/xml: # TODO: move the whole XSD XML schema here
              schema:
                type: string
      security:
        - bearerAuth: [ ]
          oAuth2ClientCredentials:
            - 'console_ro'
            - 'api_ro'
  /feed/empty:
    get:
      tags:
        - Feeds
      summary: 'Returns an empty file that can be used to temporarily pause the entire ad inventory.'
      description: 'It provides a downloadable file with a unique name, sufficient to upload it to your xml web server and change the URL to it.'
      operationId: getFeedEmptyV1
      parameters:
        - name: format
          in: path
          description: 'Provide the format of the file.'
          required: false
          schema:
            type: string
            enum:
              - tsv
              - xml
            example: tsv
            default: xml
      responses:
        '200':
          description: 'Success'
          content:
            text/xml:
              schema:
                type: object
                xml:
                  name: ads
            text/tab-separated-values:
              schema:
                type: string
                example: 'id\ttitle\tdescription'
          headers:
            Content-Disposition:
              schema:
                type: string
                description: 'An example of the Content-Disposition header'
                example: 'attachment; filename="empty-234897234.xml'
      security:
        - bearerAuth: [ ]
          oAuth2ClientCredentials:
            - 'console_ro'
            - 'api_ro'
  /feed/import:
    get:
      tags:
        - Feeds
      summary: 'Returns the feed imports of the current user in descending chronological order.'
      description: 'Feed imports are triggered automatically by the system once per day or on demand by Customer Service agents. <br>
      Each feed import object contains the time when it was started (``dateCreated``), the URL of the user’s XML document (``url``) and whether the document could successfully be processed (``status``). <br>
      
      <br><br>
      The feed import object also contains counters to denote the total number of ads specified in the XML document (``totalCount``), the number of ads which were processed without errors (``okCount``), 
      the number of ads which were processed with warnings (``warningCount``) and the number of ads which were rejected due to errors (``errorCount``).
      '
      operationId: getFeedImport
      parameters:
        - name: limit
          in: query
          required: false
          description: 'Limits the number of records returned.'
          schema:
            type: integer
            maximum: 100
            default: 10
          example: 50
      responses:
        '200':
          description: 'Success'
          headers:
            Oauth-Scope:
              description: 'Oauth scopes that are available with the supplied token'
              schema:
                type: string
                example: 'api_ro console_ro'
            Oauth-Scope-Required:
              description: 'The required permission for this particular call'
              schema:
                type: string
                example: 'get_feed_import'
          content:
            application/sellside.feedimport.list-v1+json:
              schema:
                type: array
                readOnly: true
                description: 'Feed imports of the current user in descending chronological order.'
                items:
                  properties:
                    id:
                      type: number
                      description: 'A unique identifier which can be used to query for more information regarding errorneous ads in the feed.'
                    url:
                      type: string
                      description: 'The configured feed URL for the current user.'
                      maxLength: 512
                    status:
                      type: string
                      enum:
                        - DONE
                        - PENDING
                        - REJECTED
                      description: 'The status of the feed import. The status field contains **DONE** when the document was processed correctly, **PENDING** - when it is currently being processed or **REJECTED** - when it was either not accessible or syntactically incorrect. <br>
        In the latter case, the field ``error`` contains a descriptive error message.'
                    dateCreated:
                      type: string
                      format: datetime
                      description: 'The time when the feed import started.'
                    error:
                      type: string
                      description: 'Contains a descriptive message o fthe error in case a feed was rejected.'
                    totalCount:
                      type: number
                      description: 'The total number of ads specified in the feed.'
                    okCount:
                      type: number
                      description: 'The number of ads whihc were processed without errors.'
                    warningCount:
                      type: number
                      description: 'The number of ads which were processed with warnings.'
                    errorCount:
                      type: number
                      description: 'The number of ads which were rejected (not imported) due to errors.'

                example:
                  - id: 5
                    url: 'http://www.ourshop.com/feed.xml'
                    status: 'DONE'
                    dateCreated: '2016-02-03T15:35:33Z'
                    error: ''
                    totalCount: 2
                    okCount: 1
                    warningCount: 1
                    errorCount: 0
                  - id: 4
                    url: 'http://ourshop.com/notfound.xml'
                    status: 'REJECTED'
                    dateCreated: '2016-02-03T15:35:23Z'
                    error: 'HTTP 404 Not Found for: http://ourshop.com/notfound.xm'
                    totalCount: -1
                    okCount: 0
                    warningCount: 0
                    errorCount: 0
        '400':
          description: 'Bad Request'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 2002
                  text: 'out of range'
                  msg: 'The value of the field ''limit'' was out of range (n > 1)'
      security:
        - bearerAuth: [ ]
          oAuth2ClientCredentials:
            - 'console_ro'
            - 'api_ro'
  # CAMPAIGNS
  /campaign/:
    post:
      tags:
        - Campaigns
      summary: 'Creates a new campaign for the user'
      description: 'Creates a new campaign for the user. If successful, it returns an object representing the campaign, with default values on certain fields, if not provided. A minimum payload is an empty JSON, as none of the fields are mandatory.'
      operationId: postCampaignV2
      parameters:
        - name: Accept
          in: header
          description: 'This header represents the version of the response acceptable by the client.'
          schema:
            type: string
            example: 'application/sellside.campaign-v5+json'
          required: true
      requestBody:
        content:
          application/sellside.campaign-v5+json:
            schema:
              $ref: '#/components/schemas/CampaignRequestV5'
          application/sellside.campaign-v2+json:
            schema:
              deprecated: true
              $ref: '#/components/schemas/CampaignV2'
      responses:
        '201':
          description: 'Campaign created'
          headers:
            Oauth-Scope:
              description: 'Oauth scopes that are available with the supplied token'
              schema:
                type: string
                example: 'api_ro api_rw'
            Oauth-Scope-Required:
              description: 'The required permission for this particular call'
              schema:
                type: string
                example: 'post_campaign'
          content:
            application/sellside.campaign-v5+json:
              schema:
                $ref: '#/components/schemas/CampaignResponseV5'
            application/sellside.campaign-v2+json:
              schema:
                $ref: '#/components/schemas/CampaignV2'
          links:
            vendorIdLink:
              operationId: getCampaignByVendorId
              parameters:
                vendorId: '$response.body#/vendorId'
        '400':
          description: 'Validation error'
          content:
            'content-type: application/json; charset=utf-8':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
                example:
                  - code: 2034
                    text: 'campaign already exists'
                    msg: 'Campaign can only be created once for the same user'
                    field: 'campaign'
                    arg: ''
        '401':
          description: 'Unauthorized'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 1009
                  text: 'missing token'
                  msg: 'Authorization header is missing or in the wrong format'
        '406':
          description: 'Not Acceptable'
          content:
            'content-type: application/json; charset=utf-8':
              schema:
                $ref: '#/components/schemas/NotSupportedError'
        '500':
          description: 'Server Error'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 1000
                  text: 'internal error'
                  msg: 'The server encountered an error'
      security:
        - bearerAuth: []
          oAuth2ClientCredentials:
            - 'console_rw'
            - 'api_rw'
  '/campaign/byVendor/{vendorId}':
    get:
      tags:
        - Campaigns
      summary: 'Returns a single campaign with the given vendorId.'
      description: 'If the campaign does not exist or does not belong to the user the server returns 404 Not Found. If the vendorId is bigger than 64 characters the server returns 400 Bad Request. The vendorId is unique for a user; It is not possible for a single user to create multiple campaigns with the same vendorId (even if other campaigns are in status DELETED)'
      operationId: getCampaignByVendorId
      parameters:
        - name: vendorId
          in: path
          description: 'Case-insensitive filter for a keyword in the title; will include only ads which contain the given keyword in their title.'
          schema:
            type: string
            example: 'my-christmas-campaign-2020'
          required: true
        - name: Accept
          in: header
          description: 'This header represents the version of the response acceptable by the client.'
          schema:
            type: string
            example: 'application/sellside.campaign-v5+json'
          required: true
      responses:
        '200':
          description: 'Success'
          headers:
            Oauth-Scope:
              description: 'Oauth scopes that are available with the supplied token'
              schema:
                type: string
                example: 'api_ro console_ro'
            Oauth-Scope-Required:
              description: 'The required permission for this particular call'
              schema:
                type: string
                example: 'get_campaign'
          content:
            application/sellside.campaign-v5+json:
              schema:
                $ref: '#/components/schemas/CampaignResponseV5'
            application/sellside.campaign-v2+json:
              schema:
                $ref: '#/components/schemas/CampaignV2'
        '401':
          description: 'Unauthorized'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 1009
                  text: 'missing token'
                  msg: 'Authorization header is missing or in the wrong format'
        '406':
          description: 'Not Acceptable'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedError'
        '500':
          description: 'Server Error'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 1000
                  text: 'internal error'
                  msg: 'The server encountered an error'
      security:
        - bearerAuth: []
          oAuth2ClientCredentials:
            - 'console_ro'
            - 'api_ro'
  /campaign/{id}:
    get:
      tags:
        - Campaigns
      summary: 'Returns a single existing campaign with the given id.'
      parameters:
        - name: id
          in: path
          description: 'A unique identifier of requested campaign.'
          schema:
            type: integer
            format: int64
            minimum: 1
            example: 123
          required: true
        - name: Accept
          in: header
          description: 'This header represents the version of the response acceptable by the client.'
          schema:
            type: string
            example: 'application/sellside.campaign-v5+json'
          required: true
      responses:
        '200':
          description: 'Success'
          headers:
            Oauth-Scope:
              description: 'Oauth scopes that are available with the supplied token'
              schema:
                type: string
                example: 'api_ro console_ro'
            Oauth-Scope-Required:
              description: 'The required permission for this particular call'
              schema:
                type: string
                example: 'get_campaign'
          content:
            application/sellside.campaign-v5+json:
              schema:
                $ref: '#/components/schemas/CampaignResponseV5'
            application/sellside.campaign-v2+json:
              schema:
                $ref: '#/components/schemas/CampaignV2'
        '401':
          description: 'Unauthorized'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 1009
                  text: 'missing token'
                  msg: 'Authorization header is missing or in the wrong format'
        '406':
          description: 'Not Acceptable'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedError'
        '500':
          description: 'Server Error'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 1000
                  text: 'internal error'
                  msg: 'The server encountered an error'
      security:
        - bearerAuth: [ ]
          oAuth2ClientCredentials:
            - 'console_ro'
            - 'api_ro'
    put:
      tags:
        - Campaigns
      summary: 'Updates an existing campaign identified by a campaign id.'
      parameters:
        - name: id
          in: path
          description: 'A unique identifier of requested campaign.'
          schema:
            type: integer
            format: int64
            minimum: 1
            example: 123
          required: true
        - name: Accept
          in: header
          description: 'This header represents the version of the response acceptable by the client.'
          schema:
            type: string
            example: 'application/sellside.campaign-v5+json'
          required: true
      requestBody:
        content:
          application/sellside.campaign-v5+json:
            schema:
              $ref: '#/components/schemas/CampaignRequestV5'
          application/sellside.campaign-v2+json:
            schema:
              deprecated: true
              $ref: '#/components/schemas/CampaignV2'
      responses:
        '200':
          description: 'Success'
          headers:
            Oauth-Scope:
              description: 'Oauth scopes that are available with the supplied token'
              schema:
                type: string
                example: 'api_rw console_rw'
            Oauth-Scope-Required:
              description: 'The required permission for this particular call'
              schema:
                type: string
                example: 'put_campaign'
          content:
            application/sellside.campaign-v5+json:
              schema:
                $ref: '#/components/schemas/CampaignResponseV5'
            application/sellside.campaign-v2+json:
              schema:
                $ref: '#/components/schemas/CampaignV2'
        '401':
          description: 'Unauthorized'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 1009
                  text: 'missing token'
                  msg: 'Authorization header is missing or in the wrong format'
        '406':
          description: 'Not Acceptable'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedError'
        '500':
          description: 'Server Error'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 1000
                  text: 'internal error'
                  msg: 'The server encountered an error'
      security:
        - bearerAuth: [ ]
          oAuth2ClientCredentials:
            - 'console_rw'
            - 'api_rw'
  /campaigns:
    get:
      tags:
        - Campaigns
      summary: 'Get all campaigns for the authenticated user.'
      parameters:
        - name: Accept
          in: header
          description: 'This header represents the version of the response acceptable by the client.'
          schema:
            type: string
            example: 'application/sellside.campaign.list-v5+json'
          required: true
        - name: limit
          in: query
          required: false
          description: 'Limits the number of campaigns returned.'
          schema:
            type: integer
            maximum: 100
            default: 100
          example: 50
        - name: pageToken
          in: query
          required: false
          description: 'Encoded information on where the previous page ended, send this along with the same request to get the next page of results.'
          schema:
            type: string
            format: byte
          example: 'eyJpZCI6MTAwMT'
      responses:
        '200':
          description: 'Success'
          headers:
            Oauth-Scope:
              description: 'Oauth scopes that are available with the supplied token'
              schema:
                type: string
                example: 'api_ro console_ro'
            Oauth-Scope-Required:
              description: 'The required permission for this particular call'
              schema:
                type: string
                example: 'get_campaign'
          content:
            application/sellside.campaign-v5+json:
              schema:
                type: object
                properties:
                  total:
                    description: 'The total number of campaigns for the authenticated user.'
                    type: integer
                    format: int64
                    example: 1
                    minimum: 0
                  nextPageToken:
                    description: 'Replaces the usage of the ‘offset’ parameter and allows the caller to paginate through a large list of ads more efficiently. In essence, it contains encoded information on where the returned result ended, so it can serve as additional filters in the call for the next result set, making that call more efficient.
                    When a response does not contain a nextPageToken you have reached the last page of results and there are no more to fetch.
                      '
                    type: string
                    example: 'eyJpZCI6MTAwMTgz'
                  campaigns:
                    type: array
                    items:
                      $ref: '#/components/schemas/CampaignResponseV5'
            application/sellside.campaign-v2+json:
              schema:
                $ref: '#/components/schemas/CampaignV2'
        '401':
          description: 'Unauthorized'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 1009
                  text: 'missing token'
                  msg: 'Authorization header is missing or in the wrong format'
        '406':
          description: 'Not Acceptable'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedError'
        '500':
          description: 'Server Error'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 1000
                  text: 'internal error'
                  msg: 'The server encountered an error'
      security:
        - bearerAuth: [ ]
          oAuth2ClientCredentials:
            - 'console_ro'
            - 'api_ro'
  /campaign/{id}/status/{status}:
    put:
      tags:
        - Campaigns
      summary: 'Updates the status of the campaign.'
      parameters:
        - name: id
          in: path
          description: 'A unique identifier of requested campaign.'
          schema:
            type: integer
            format: int64
            minimum: 1
            example: 123
          required: true
        - name: status
          in: path
          description: 'The desired status of the campaign'
          required: true
          schema:
            $ref: '#/components/schemas/CampaignStatusRequestV5'
            example: 'PAUSED'
        - name: Accept
          in: header
          description: 'This header represents the version of the response acceptable by the client.'
          schema:
            type: string
            example: 'application/sellside.campaign-v5+json'
          required: true
      responses:
        '200':
          description: 'Success'
          headers:
            Oauth-Scope:
              description: 'Oauth scopes that are available with the supplied token'
              schema:
                type: string
                example: 'api_rw console_rw'
            Oauth-Scope-Required:
              description: 'The required permission for this particular call'
              schema:
                type: string
                example: 'put_campaign'
          content:
            application/sellside.campaign-v5+json:
              schema:
                type: object # empty
        '404':
          description: 'Not Found'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 1004
                  text: 'not found'
                  msg: 'The entity was not found'
        '401':
          description: 'Unauthorized'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 1009
                  text: 'missing token'
                  msg: 'Authorization header is missing or in the wrong format'
        '406':
          description: 'Not Acceptable'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedError'
        '500':
          description: 'Server Error'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 1000
                  text: 'internal error'
                  msg: 'The server encountered an error'
      security:
        - bearerAuth: [ ]
          oAuth2ClientCredentials:
            - 'console_rw'
            - 'api_rw'
  /campaign/{id}/budgets:
    put:
      tags:
        - Campaigns
      summary: 'Updates the budget limits of a campaign.'
      parameters:
        - name: id
          in: path
          description: 'A unique identifier of requested campaign.'
          schema:
            type: integer
            format: int64
            minimum: 1
            example: 123
          required: true
        - name: Accept
          in: header
          description: 'This header represents the version of the response acceptable by the client.'
          schema:
            type: string
            example: 'application/sellside.campaign-v5+json'
          required: true
      requestBody:
        required: true
        content:
          application/sellside.campaign-v5+json:
            schema:
              $ref: '#/components/schemas/CampaignBudgetsRequestV5'
      responses:
        '200':
          description: 'Success'
          headers:
            Oauth-Scope:
              description: 'Oauth scopes that are available with the supplied token'
              schema:
                type: string
                example: 'api_rw console_rw'
            Oauth-Scope-Required:
              description: 'The required permission for this particular call'
              schema:
                type: string
                example: 'put_campaign'
          content:
            application/sellside.campaign-v5+json:
              schema:
                $ref: '#/components/schemas/CampaignBudgetsResponseV5'
        '404':
          description: 'Not Found'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 1004
                  text: 'not found'
                  msg: 'The entity was not found'
        '401':
          description: 'Unauthorized'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 1009
                  text: 'missing token'
                  msg: 'Authorization header is missing or in the wrong format'
        '406':
          description: 'Not Acceptable'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedError'
        '500':
          description: 'Server Error'
          content:
            application/sellside.error-v1+json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                - code: 1000
                  text: 'internal error'
                  msg: 'The server encountered an error'
      security:
        - bearerAuth: [ ]
          oAuth2ClientCredentials:
            - 'console_rw'
            - 'api_rw'

  # REPORTING
  /metrics/report:
    get:
      tags:
        - Reporting
      summary: 'Returns a performance report for a selected date period, per ad. '
      description: 'The report contains statistics for performance events like impressions, clicks, url clicks, emails for all ads which have had performance-related activity.<br>
      <span>&#9888;</span><br>
      We introduce a new monetary unit of micros across our product, where one cent equals 10000 micros. <b>One micro is 1-millionth of the local tenant currency. This will allow for a higher level of granularity when specifying the cost (per click)</b>.<br><br>
      We are substituting the current CPC values across the API with a bid value, and the actual (incurred) billed cost value - this to allow for better differentiation between the two. This split between bid and billed values is currently utilised for an experimental feature which adjusts the bid value for the quality of the traffic. <br><br>

      This new micros unit, as well as the distinction between bid and billed cost, are to become a core part of the product. We will gradually deprecate any fields with cents and local currency units across the API.'
      parameters:
        - name: Accept
          in: header
          description: 'This header depends on the choice of the scope for the metrics. A scope for a metric defines the level at which that metric is defined — hit, session, or user. 
          Conceptually, user is the highest level scope and hit is the lowest level scope. 
          For example, ``clicks`` counts the number of clicks that ad received when the scope is _hit_, whereas it counts the number of sessions with clicks when the scope is _session_.
          We plan to extend support for user-level scoped metrics if there is demand for it.'
          schema:
            type: string
            example: 'application/sellside.metrics.ad-hit-v2+json'
          required: true
        - name: startDate
          in: query
          description: 'Report start date'
          required: true
          schema:
            type: string
            format: date
            example: '2014-11-24'
        - name: endDate
          in: query
          description: 'Report end date (inclusive)'
          required: true
          schema:
            type: string
            format: date
            example: '2014-11-24'
        - name: adIds
          in: query
          description: 'Comma-separated-list of ad id’s which to filter the result set on. Optional, default empty to include data for all ads.'
          schema:
            type: array
            items:
              type: integer
              format: int64
            example: [1,2,3]
          required: false
        - name: status
          in: query
          description: 'Comma-separated-list of ad statuses which to filter the result set on.'
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - 'ACTIVE'
                - 'PAUSED'
                - 'BUDGET_REACHED'
                - 'DAILY_BUDGET_REACHED'
                - 'DELETED'
                - 'DELETED_BY_CS'
                - 'SUSPENDED_BY_CS'
                - 'DOMAIN_PENDING'
            default: ['ACTIVE']
            example: ['ACTIVE', 'PAUSED']
      responses:
        '200':
          description: 'Success'
          headers:
            Oauth-Scope:
              description: 'Oauth scopes that are available with the supplied token'
              schema:
                type: string
                example: 'api_ro console_ro'
            Oauth-Scope-Required:
              description: 'The required permission for this particular call'
              schema:
                type: string
                example: 'get_report'
          content:
            application/sellside.metrics.ad-hit-v2+json:
              schema:
                $ref: '#/components/schemas/MetricsReportV2'
            application/sellside.metrics.ad-session-v2+json:
              schema:
                $ref: '#/components/schemas/MetricsReportV2'
            application/sellside.metrics.ad-hit-v1+json:
              schema:
                $ref: '#/components/schemas/MetricsReportV1'
            application/sellside.metrics.ad-session-v1+json:
              schema:
                $ref: '#/components/schemas/MetricsReportV1'
        '400':
          description: 'Bad Request'
          content:
            'content-type: application/json; charset=utf-8':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                  - code: 2000
                    text: 'missing argument'
                    msg: 'The field ''startDate'' was missing'
                    field: 'startDate'
                  - code: 2000
                    text: 'missing argument'
                    msg: 'The field ''endDate'' was missing'
                    field: 'endDate'
      security:
        - bearerAuth: [ ]
          oAuth2ClientCredentials:
            - 'console_ro'
            - 'api_ro'
  /metrics/ads:
    get:
      tags:
        - Reporting
      summary: 'Returns an ads performance report either in Excel or in CSV format.'
      description: 'The report represents a timeseries breakdown of the performance of each ad **which has had performance-related activity in the requested period.**
      <span>&#9888;</span><br>
      We introduce a new monetary unit of micros across our product, where one cent equals 10000 micros. <b>One micro is 1-millionth of the local tenant currency. This will allow for a higher level of granularity when specifying the cost (per click)</b>.<br><br>
      We are substituting the current CPC values across the API with a bid value, and the actual (incurred) billed cost value - this to allow for better differentiation between the two. This split between bid and billed values is currently utilised for an experimental feature which adjusts the bid value for the quality of the traffic. <br><br>

      This new micros unit, as well as the distinction between bid and billed cost, are to become a core part of the product. We will gradually deprecate any fields with cents and local currency units across the API.'
      parameters:
        - name: accept
          in: header
          description: 'If the Accept header is ``application/vnd.ms-excel;v=2`` an Excel document is created, in ``.xlsx`` format.
          If the Accept header is ``text/csv;v=2`` a CSV document is created, in the standard ``RFC-4180`` format. Fields with a comma, fields with a quote or newline, and fields which start with a space will be enclosed in quotes. Empty strings are not enclosed in quotes.'
          required: true
          schema:
            type: string
            example: 'text/csv;v=2'
        - name: accept-language
          in: header
          description: 'advertises the preferred client locales (
          language and region) for the report column names. Both ``language_REGION`` and ``language-REGION`` are supported formats, and can be assigned optional weights. If the preferred locale(s) are not available, a default one is used. Currently available locales are tenant-specific, and are listed below:'
          schema:
            type: string
            example: 'nl-NL'
        - name: aggregate
          description: 'Granularity of the timeseries breakdown.'
          schema:
            type: string
            enum:
              - 'daily'
              - 'weekly'
              - 'monthly'
              - 'yearly'
            default: 'daily'
        - name: startDate
          description: 'Start date of the report in ``YYYY-MM-DD`` format (inclusive). Tenant timezone is assumed.'
          schema:
            type: string
            format: date
            example: '018-01-01'
        - name: endDate
          description: 'End date of the report in YYYY-MM-DD (inclusive). Tenant timezone is assumed.'
          schema:
            type: string
            format: date
            example: '2018-05-01'
        - name: includeDeleted
          description: 'Deleted ads are included/excluded.'
          schema:
            type: boolean
            default: false
        - name: query
          description: 'Search phrase to filter on ad titles.'
          schema:
            type: string
            example: 'Interesting'
        - name: fields
          description: 'Comma-separated list of column fields to include in the report. Possible values are the response model fields. By default all fields are included, and this may affect the speed of data generation.'
          schema:
            type: array
            enum:
              - 'date'
              - 'adID'
              - 'L1Category'
              - 'L2Category'
              - 'L3Category'
              - 'title'
              - 'startDate'
              - 'endDate'
              - 'bidMicros'
              - 'spentMicros'
              - 'clicks'
              - 'impressions'
              - 'viewCTR'
              - 'websiteClicks'
              - 'emails'
              - 'engagementCTR'
              - 'region'
              - 'vendorID'
              - 'externalURL'
      responses:
        '200':
          description: 'Success'
          headers:
            Oauth-Scope:
              description: 'Oauth scopes that are available with the supplied token'
              schema:
                type: string
                example: 'api_ro console_ro'
            Oauth-Scope-Required:
              description: 'The required permission for this particular call'
              schema:
                type: string
                example: 'get_report'
            Content-Type:
              schema:
                type: string
                example: 'text/csv;v=2'
            Content-Language:
              schema:
                description: ''
                type: string
                example: 'nl-NL'
            Content-Disposition:
              schema:
                type: string
                example: 'attachment; filename=mp-report-1-20180202-144340.csv'
          content:
            text/csv;v=2:
              schema:
                $ref: '#/components/schemas/MetricsAdsV2'
              examples:
                example1:
                  value: |
                    GET /api/sellside/metrics/ads?startDate=2018-01-01&endDate=2018-05-01&query=Interesting&aggregate=yearly&fields=date,adID,clicks,spentMicros
                    Accept: text/csv;v=2

                    HTTP/1.1 200 OK
                    Content-Type: text/csv;v=2
                    Content-Language: nl-NL
                    Content-Disposition: attachment; filename=mp-report-1-20180202-144340.csv
                    Datum (geaggregeerde),Advertentie nummer,Totaal besteed (Micros),Clicks
                    
                    2018,7,0.3000000000,200000
                    2018,8,0.1500000000,3000000
                example2:
                  value: |
                    GET /api/sellside/metrics/ads?startDate=2018-01-01&endDate=2018-05-01&query=Interesting
                    Accept: text/csv
                    Accept-Language: nl_NL, fr_NL;q=0.5

                    HTTP/1.1 200 OK
                    Content-Type: text/csv
                    Content-Language: nl-NL
                    Content-Disposition: attachment; filename=mp-report-1-20180202-144320.csv
                    Datum (geaggregeerde),Advertentie nummer,Groep,Rubriek,,Advertentietitel,Start,Eind,CPC (EUR),Totaal besteed (EUR),Clicks,Impressies,CTR (%),URL Clicks,E-mails,Engagement CTR (%),Vendor ID,Region
                    2018-02-02,7,Cd's en Dvd's,Cd's | Country en Western,,"Interesting title, what about ""quotes""",2018-02-02 11:48:52,,0.1500000000,0.3000000000,2,4,50.0000000000,0,0,0.0000000000,someVendor7,Utrecht
                    2018-02-03,8,Cd's en Dvd's,Cd's | Country en Western,,Interesting CD with country music,2018-02-02 11:48:52,,0.1500000000,0.3000000000,2,4,50.0000000000,0,0,0.0000000000,someVendor8,Amsterdam
                example3:
                  value: |
                    GET /api/sellside/metrics/ads?startDate=2018-01-01&endDate=2018-05-01&query=Interesting&aggregate=monthly
                    Accept: text/csv

                    HTTP/1.1 200 OK
                    Content-Type: text/csv
                    Content-Language: nl-NL
                    Content-Disposition: attachment; filename=mp-report-1-20180202-144330.csv
                    Datum (geaggregeerde),Advertentie nummer,Groep,Rubriek,,Advertentietitel,Start,Eind,CPC (EUR),Totaal besteed (EUR),Clicks,Impressies,CTR (%),URL Clicks,E-mails,Engagement CTR (%),Vendor ID,Region
                    2018-02,7,Cd's en Dvd's,Cd's | Country en Western,,"Interesting title, what about ""quotes""",2018-02-02 11:48:52,,0.1500000000,0.3000000000,20,40,50.0000000000,0,0,0.0000000000,someVendor7,Utrecht
                    2018-02,8,Cd's en Dvd's,Cd's | Country en Western,,Interesting CD with country music,2018-02-02 11:48:52,,0.1500000000,0.3000000000,20,40,50.0000000000,0,0,0.0000000000,someVendor8,Amsterdam
                example4:
                  value: |
                    GET /api/sellside/metrics/ads?startDate=2018-01-01&endDate=2018-05-01&query=Interesting&aggregate=yearly&fields=date,adID,clicks,spent
                    Accept: text/csv

                    HTTP/1.1 200 OK
                    Content-Type: text/csv
                    Content-Language: nl-NL
                    Content-Disposition: attachment; filename=mp-report-1-20180202-144340.csv
                    Datum (geaggregeerde),Advertentie nummer,Totaal besteed (EUR),Clicks
                    2018,7,0.3000000000,20
                    2018,8,0.1500000000,0.3000000000
            application/vnd.ms-excel;v=2:
              schema:
                type: object
                $ref: '#/components/schemas/MetricsAdsV2'
        '400':
          description: 'Bad Request'
          content:
            'content-type: application/json; charset=utf-8':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              examples:
                missingArgument:
                  value:
                    - code: 2000
                      text: 'missing argument'
                      msg: 'The field ''endDate'' was missing'
                      field: 'endDate'
                outOfRange:
                  value:
                    - code: 2002
                      text: 'out of range'
                      msg: 'The value of the field ''endDate'' was out of range (< startDate)'
                      field: 'endDate'
                invalidArgument:
                  value:
                    - code: 2001
                      text: 'invalid argument'
                      msg: 'The value of field ''fields'' was invalid: unknown column ''spent'''
                      field: 'endDate'
        '415':
          description: 'Unsupported Media Type'
          content:
            'content-type: application/json; charset=utf-8':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
                example:
                  - code: 2007
                    text: 'unsupported format'
                    msg: 'unsupported media type'
      security:
        - bearerAuth: [ ]
          oAuth2ClientCredentials:
            - 'console_ro'
            - 'api_ro'
  /metrics/data:
    post:
      tags:
        - Reporting
      summary: 'Returns the requested reporting metrics in a json format described in the new Reporting documentation.'
      description: '
      V2 removes ``am:cpc`` from dimensions. It replaces ``am:spent``, ``am:avgCPC``, ``am:eCPC``, ``am:sessionECPC`` metrics with their corresponding ``am:spentMicros``, ``am:avgBidMicros``, ``am:eSpentMicros``, ``am:sessionESpentMicros``. It replaces ``am:currentAdCPC`` enrichment with ``am:currentAdBidMicros``.
      <span>&#9888;</span><br>
      We introduce a new monetary unit of micros across our product, where one cent equals 10000 micros. <b>One micro is 1-millionth of the local tenant currency. This will allow for a higher level of granularity when specifying the cost (per click)</b>.<br><br>
      We are substituting the current CPC values across the API with a bid value, and the actual (incurred) billed cost value - this to allow for better differentiation between the two. This split between bid and billed values is currently utilised for an experimental feature which adjusts the bid value for the quality of the traffic. <br><br>

      This new micros unit, as well as the distinction between bid and billed cost, are to become a core part of the product. We will gradually deprecate any fields with cents and local currency units across the API.'
      requestBody:
        content:
          application/sellside.metrics.data-v2+json:
            schema:
              $ref: '#/components/schemas/MetricsDataRequestV2'
            examples:
              example1:
                description: 'Get all clicks and impressions for categories ``1234`` and ``5678`` for the previous week.'
                value:
                  timeRanges:
                    - period: lastWeek
                  dimensions: [ ]
                  metrics:
                    - am:clicks
                    - am:impressions
                  filters:
                    - field: am:categoryID
                      operator: in
                      value:
                        - 1234
                        - 5678
              example2:
                description: 'Get all clicks and impressions for categories ``1234`` and ``5678`` for the previous week, 
                but split performance metrics per day and category. In addition, sort by date in ascending direction.'
                value:
                  timeRanges:
                    - period: lastWeek
                  dimensions:
                    - am:date
                    - am:categoryID
                  metrics:
                    - am:clicks
                    - am:impressions
                  filters:
                    - field: am:categoryID
                      operator: in
                      value:
                        - 1234
                        - 5678
                  sorts:
                    - field: am:date
                      direction: asc
              example3:
                description: 'Get all clicks, and average spent micros for categories 1234 and 5678 for the previous week, but split performance metrics per ad ID. In addition, enrich the response rows with current ad title and vendorID. Limit to 3 results.'
                value:
                  timeRanges:
                    - period: lastWeek
                  dimensions:
                    - am:adID
                  metrics:
                    - am:clicks
                    - am:avgSpentMicros
                  filters:
                    - field: am:categoryID
                      operator: in
                      value:
                        - 1234
                        - 5678
                  enrichment:
                    - am:currentAdTitle
                    - am:currentAdVendorID
                  limit: 3
              example4:
                description: 'A sample request with all top-level query fields expanded.'
                value:
                  timeRanges:
                    - period: lastWeek
                  aggregate: daily
                  dimensions:
                    - am:date
                    - am:adID
                  metrics:
                    - am:clicks
                    - am:impressions
                    - am:engagementCTR
                  sorts:
                    - field: date
                      direction: asc
                  filters:
                    - field: am:categoryID
                      operator: in
                      value:
                        - 1235
                    - field: am:regionID
                      operator: in
                      value:
                        - 1
                        - 2
                        - 3
                        - 4
                  enrichment:
                    - am:currentAdTitle
                    - am:currentAdCategoryL1
                    - am:currentAdStartDate
                    - am:currentAdEndDate
                    - am:currentAdVendorID
                    - am:currentAdRegion
                    - am:currentAdImage
                  limit: 5
                  offset: 2
      responses:
        '200':
          description: 'Success'
          headers:
            Oauth-Scope:
              description: 'Oauth scopes that are available with the supplied token'
              schema:
                type: string
                example: 'api_ro console_ro'
            Oauth-Scope-Required:
              description: 'The required permission for this particular call'
              schema:
                type: string
                example: 'get_report'
            Content-Type:
              schema:
                type: string
                example: 'application/sellside.metrics.data-v2+json'
          content:
            application/sellside.metrics.data-v2+json:
              schema:
                $ref: '#/components/schemas/MetricsDataResponseV2'
              examples:
                example1:
                  description: 'Get all clicks and impressions for categories ``1234`` and ``5678`` for the previous week.'
                  value:
                    data:
                      - rows:
                        - dimensions: [ ]
                          metrics:
                            - 1483
                            - 36623
                        count: 1
                example2:
                  description: 'Get all clicks and impressions for categories ``1234`` and ``5678`` for the previous week, 
                  but split performance metrics per day and category. In addition, sort by date in ascending direction.'
                  value:
                    data:
                      - rows:
                        - dimensions:
                            - '2018-12-08 00:00:00'
                            - '1234'
                          metrics:
                            - 11
                            - 12
                        - dimensions:
                            - '2018-12-08 00:00:00'
                            - '5678'
                          metrics:
                            - 9
                            - 20
                        - dimensions:
                            - '2018-12-09 00:00:00'
                            - '1234'
                          metrics:
                            - 34
                            - 67
                        - dimensions:
                            - '2018-12-09 00:00:00'
                            - '5678'
                          metrics:
                            - 19
                            - 20
                        - dimensions:
                            - '2018-12-14 00:00:00'
                            - '1234'
                          metrics:
                            - 12
                            - 90
                        - dimensions:
                            - '2018-12-14 00:00:00'
                            - '5678'
                          metrics:
                            - 43
                            - 76
                        count: 54
                example3:
                  description: 'Get all clicks, and average spent micros for categories 1234 and 5678 for the previous week, but split performance metrics per ad ID. In addition, enrich the response rows with current ad title and vendorID. Limit to 3 results.'
                  value:
                    data:
                      - rows:
                        - dimensions:
                            - '11111'
                          metrics:
                            - 11
                            - 45000
                          enrichment:
                            - 'Ad title #11111'
                            - vendor11111
                        - dimensions:
                            - '33333'
                          metrics:
                            - 9
                            - 3
                          enrichment:
                            - 'Ad title #33333'
                            - vendor33333
                        - dimensions:
                            - '22222'
                          metrics:
                            - 34
                            - 2.3
                          enrichment:
                            - 'Ad title #33333'
                            - vendor33333
                        count: 3
                example4:
                  description: 'A sample response with all top-level query fields expanded.'
                  value:
                    data:
                      - rows:
                        - dimensions:
                            - '2018-01-10 00:00:00'
                            - '4444'
                          metrics:
                            - 11
                            - 22
                            - 0.634
                          enrichment:
                            - 'Some title of ad #4444'
                            - 'Category L1 description'
                            - '2016-02-10 10:15:15'
                            - ''
                            - 'fsd23432'
                            - 'City of Toronto'
                            - 'https://mp.images.icas.io/api/v1/a6519ad0/images/cd/cd41d66f-ff99-4abc-8ea8-ef2131c92b8e?rule=r-726x726'
                        - dimensions:
                            - '2018-01-11 00:00:00'
                            - '5555'
                          metrics:
                            - 9
                            - 20
                            - 0.244
                          enrichment:
                            - 'Some title of ad #5555'
                            - 'Category L1 description'
                            - '2016-05-11 09:10:15'
                            - '2016-07-11 06:10:10'
                            - '123425d'
                            - 'Canada'
                            - 'https://mp.images.icas.io/api/v1/a6519ad0/images/66/6628f902-6c59-4c71-bf37-8d127a53e277?rule=r-726x726'
                        - dimensions:
                            - '2018-01-12 00:00:00'
                            - '4444'
                          metrics:
                            - 34
                            - 67
                            - 0.252
                          enrichment:
                            - 'Some title of ad #4444'
                            - 'Category L1 description'
                            - '2016-02-10 10:15:15'
                            - ''
                            - 'fsd23432'
                            - City of Toronto
                            - 'https://mp.images.icas.io/api/v1/a6519ad0/images/fb/fba866a4-ff7b-4134-bb58-c12cfa02649e?rule=r-726x726'
                        - dimensions:
                            - '2018-01-13 00:00:00'
                            - '5555'
                          metrics:
                            - 55
                            - 61
                            - 0.312
                          enrichment:
                            - 'Some title of ad #5555'
                            - 'Category L1 description'
                            - '2016-05-11 09:10:15'
                            - '2016-07-11 06:10:10'
                            - '123425d'
                            - 'Canada'
                            - 'https://mp.images.icas.io/api/v1/a6519ad0/images/d7/d7d25c7b-4494-491c-980a-7f6cdde14c21?rule=r-726x726'
                        - dimensions:
                            - '2018-01-14 00:00:00'
                            - '5555'
                          metrics:
                            - 43
                            - 76
                            - 0.543
                          enrichment:
                            - 'Some title of ad #5555'
                            - 'Category L1 description'
                            - '2016-05-11 09:10:15'
                            - '2016-07-11 06:10:10'
                            - '123425d'
                            - 'Canada'
                            - 'https://mp.images.icas.io/api/v1/a6519ad0/images/f1/f16052a4-c08a-480a-855e-cbc4cd3a8e59?rule=r-726x726'
                        count: 5
        '400':
          description: 'Bad Request'
          content:
            'content-type: application/json; charset=utf-8':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              examples:
                missingArgument1:
                  value:
                    - code: 2000
                      text: 'missing argument'
                      msg: 'The field ''aggregate'' was missing'
                      field: 'endDate'
                missingArgument2:
                  value:
                    - code: 2000
                      text: 'missing argument'
                      msg: 'The field ''metrics'' was missing'
                      field: 'metrics'
                invalidArgument:
                  value:
                    - code: 2001
                      text: 'invalid argument'
                      msg: 'The value of field ''dimensions:[am:wrongDimension]'' was invalid'
        '500':
          description: 'internal error'
          content:
            'content-type: application/json; charset=utf-8':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseError'
              example:
                  - code: 1000
                    text: 'internal error'
                    msg: 'Failed to execute query'
      security:
        - bearerAuth: [ ]
          oAuth2ClientCredentials:
            - 'console_ro'
            - 'api_ro'

  /user:
    get:
      summary: 'Returns information of the current authenticated user.'
      parameters:
        - name: Accept
          in: header
          description: 'The version of the response data model.'
          type: string
          example: 'application/sellside.user-v4+json'
          required: true
      responses:
        '200':
          description: 'Success'
          headers:
            Oauth-Scope:
              description: 'Oauth scopes that are available with the supplied token'
              schema:
                type: string
                example: 'api_ro console_ro'
            Oauth-Scope-Required:
              description: 'The required permission for this particular call'
              schema:
                type: string
                example: 'get_user'
            Content-Type:
              schema:
                type: string
                example: 'application/sellside.user-v4+json'
          content:
            application/sellside.user-v4+json:
              schema:
                type: object
                properties:
                  id:
                    description: 'Contains a unique user identifier.'
                    type: integer
                    format: int64
                  emailAddress:
                    description: 'The email address of the current authenticated user.'
                    type: string
                    format: email
                  sellerName:
                    description: 'The name provided by the authenticated user.'
                    type: string
                  phoneNumber:
                    description: 'The phone number provided by the authenticated user.'
                    type: string
                  options:
                    type: object
                    properties:
                      feed:
                        description: 'Indicates whether the authenticated user is a feed user.'
                        type: boolean
                      vanityUrl:
                        description: 'Indicates whether the ads of the authenticated user show the display URL in search results.'
                        type: boolean
                      locations:
                        description: 'Contains the user (or webshop) locations.'
                        type: array
                        items:
                          type: object
                          items:
                            houseNumber:
                              type: string
                            streetName:
                              type: string
                            city:
                              type: string
                            postalCode:
                              type: string
                            phoneNumber:
                              type: string
                      hasAds:
                        description: 'Indicates whether the authenticated user has any ads (including deleted).'
                        type: boolean
                      isAPIManaged:
                        description: 'Indicates whether the user has at least one API partner using `api-rw` scope, in other words an API partner manipulating the ads.'
                        type: boolean
              example:
                id: 123
                emailAddress: someuser@somewhere.org
                sellerName: Some User
                phoneNumber: '0612345678'
                options:
                  feed: true
                  vanityUrl: false
                locations:
                  - houseNumber: '123'
                    streetName: Some street
                    city: Some city
                    country: Some country
                    postalCode: 1432AB
                    phoneNumber: '0612345678'
                hasAds: true
                isAPIManaged: true
            application/sellside.user-v3+json:
              schema:
                type: object
                deprecated: true
                properties:
                  id:
                    description: 'Contains a unique user identifier.'
                    type: integer
                    format: int64
                  emailAddress:
                    description: 'The email address of the current authenticated user.'
                    type: string
                    format: email
                  sellerName:
                    description: 'The name provided by the authenticated user.'
                    type: string
                  phoneNumber:
                    description: 'The phone number provided by the authenticated user.'
                    type: string
                  options:
                    type: object
                    properties:
                      feed:
                        description: 'Indicates whether the authenticated user is a feed user.'
                        type: boolean
                      vanityUrl:
                        description: 'Indicates whether the ads of the authenticated user show the display URL in search results.'
                        type: boolean
                      locations:
                        description: 'Contains the user (or webshop) locations.'
                        type: array
                        items:
                          type: object
                          items:
                            houseNumber:
                              type: string
                            streetName:
                              type: string
                            city:
                              type: string
                            postalCode:
                              type: string
                            phoneNumber:
                              type: string
                      hasAds:
                        description: 'Indicates whether the authenticated user has any ads (including deleted).'
                        type: boolean
              example:
                id: 123
                emailAddress: someuser@somewhere.org
                sellerName: Some User
                phoneNumber: '0612345678'
                options:
                  feed: true
                  vanityUrl: false
                locations:
                  - houseNumber: '123'
                    streetName: Some street
                    city: Some city
                    country: Some country
                    postalCode: 1432AB
                    phoneNumber: '0612345678'
                hasAds: true
      security:
        - bearerAuth: [ ]
          oAuth2ClientCredentials:
            - 'console_ro'
            - 'api_ro'
#-------------------------------
# Reusable schemas (data models)
#-------------------------------
components:
  schemas:
    ImageResponse: # only rename with Version when multiple versions of this field exist
      description: 'When an ad is created or updated the caller provides the images as a list of image objects which contain only the source url.
        The images are then downloaded by iCAS and the server adds additional fields which describe the status of the download.
        The images will be shown in the order they are provided. The first image is shown in search results and it is the main image on the item page.'
      properties:
        src:
          type: string
          description: 'The source URL of the ImageResponse, where it will be downloaded from'
          format: base64url
          example: 'https://example.nl/8228771/wit-met-stiksel.jpg'
          readOnly: true
        status:
          type: string
          enum:
            - 'OK'
            - 'PENDING'
            - 'ERROR'
          readOnly: true
          example: 'OK'
          description: 'The server adds a status field indicating the status of the download. The status is either OK (ImageResponse was successfully downloaded), PENDING (ImageResponse is scheduled to be downloaded) or ERROR if the ImageResponse was not found or invalid.'
        dateLastUpdated:
          type: string
          format: dateTime
          example: '2018-07-26T14:56:51Z'
          description: 'The ISO 8601 UTC date and time the ad was last updated.'
          readOnly: true
        links:
          type: object
          readOnly: true
          description: 'A map of ImageResponse URLs for different dimensions of the same ImageResponse.'
          additionalProperties:
            type: string
          example:
            50x70: '//i.ebay.com/ImageResponse23434_abc.jpg'
            120x180: '//i.marktplaats.nl/ImageResponse23434_def.jpg' # only rename
    ImageRequest:
      readOnly: true
      description: 'When an ad is created or updated the caller provides the images as a list of image objects which contain only the source url. 
                   The images are then downloaded by iCAS and the server adds additional fields which describe the status of the download. 
                   The images will be shown in the order they are provided. The first image is shown in search results and it is the main image on the item page.'
      properties:
        src:
          type: string
          description: 'The source URL of the ImageResponse, where it will be downloaded from'
          minItems: 1
          format: base64url
          example: 'https://example.nl/8228771/wit-met-stiksel.jpg'
    AttributeValue:
      properties:
        schema:
          oneOf:
            - type: string
              example: 'zwart'
              maxLength: 512
              description: 'A single string value.'
            - type: number
              example: 6
              description: 'A single number value.'
            - type: array
              items:
                oneOf:
                  - type: string
                    example: 'zwart'
                    maxLength: 512
                    description: 'A single string value.'
                  - type: number
                    example: 6
                    description: 'A single number value.'
              description: 'A list of string or number values. The JSON representation of the value of a list attribute must not exceed 512 characters.'
              maxLength: 512
              example:
                - 'zwart'
                - 'groen'
    UserAttribute:
      externalDocs:
        url: 'http://ecg-icas.github.io/icas/doc/next/attributes.html#user-defined-attributes'
      type: object
      description: 'User-defined attributes are the actual names and values provided by the user for a given ad. 
      They contain any valid key/value combination as described below and are not limited by the category attributes. <br>
      This means the user can determine not only the value of the attribute, but also the name of the key.'
      properties:
        key:
          type: string
          maxLength: 32
          example: 'color'
          required: true
        label:
          type: string
          maxLength: 32
          example: 'kleur'
          required: true
          description: 'The label can contain the same value as the key.'
        locale:
          type: string
          format: locale
          description: 'Specifies the language for the label and the value. Must be a valid locale string.'
          example: 'en_US'
          required: true
        type:
          description: 'The type of the attribute. Can be one of STRING - a single string value, NUMBER - a single number value, or LIST - a list of string or number values'
          type: string
          enum:
            - 'STRING'
            - 'NUMBER'
            - 'LIST'
          example: 'LIST'
          required: true
        value:
          $ref: '#/components/schemas/AttributeValue'
    ShippingOption:
      type: object
      example:
        type: 'PICKUP'
        pickupLocation: '1097DN'
      properties:
        type:
          required: true
          type: string
          enum:
            - 'SHIP'
            - 'PICKUP'
          description: 'SHIP means the item can be delivered to the buyer in the provided time and for the provided cost. PICKUP means the item can be picked up at the provided location.'
          example: 'SHIP'
        cost:
          type: integer
          format: int64
          description: 'Cost of shipping in cents. Only valid when type is SHIP.'
          minimum: 0
          example: 15000
        time:
          type: string
          format: duration
          description: 'Time it takes to deliver the ad. Only valid when type is SHIP.'
          enum:
            - '1d'
            - '2d-5d'
            - '6d-10d'
          example: '2d-5d'
        pickupLocation:
          type: string
          description: 'Pick up location of the item. Mandatory when the type is PICKUP.'
          example: '3541CB'
    AdV2Request:
      deprecated: true
      required:
        - title
        - description
        - categoryId
        - status
        - price
        - priceType
        - salutation
        - sellerName
        - postcode
        - shippingOptions
        - bidMicros
        - currency
        - cpc
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 1235
          minimum: 0
          description: 'Unique reference to the iCAS ad, needs to be omitted in a POST or PUT action.'
        title:
          type: string
          description: 'Any string, with minimum and maximum length determined by the category. URLs are not allowed as part of the title.'
          required: true
          example: 'Buy the new iPhone here'
        description:
          type: string
          description: 'The description field of the ad. Any string, with minimum and maximum length determined by the category. URLs are not allowed as part of the title.'
          required: true
          example: 'Extra sale, buy the new iPhone today and save!'
        categoryId:
          description: 'The category in which the ad is placed. Each ad belongs to one and only one region and region of an ad cannot be updated. This field can only set once during creation of an ad.'
          type: integer
          format: int64
          required: true
          example: 2353465
          minimum: 0
        images:
          type: array
          items:
            $ref: '#/components/schemas/ImageRequest'
        externalId:
          type: string
          maxLength: 64
          description: 'Any non-empty string with a maximum length of 64 characters. When fetching an existing ad which does not have an externalId, the field is empty or omitted.'
          example: 'OURSHOP-1423453-34'
          deprecated: true
        status:
          $ref: '#/components/schemas/AdStatusV2Request'
        priceType:
          type: string
          required: true
          enum:
            - 'BIDDING'
            - 'BIDDING_FROM'
            - 'FIXED_PRICE'
            - 'FREE'
            - 'NEGOTIABLE'
            - 'SEE_DESCRIPTION'
            - 'SWAP'
            - 'CREDIBLE_BID'
            - 'ON_DEMAND'
          description: 'Each ad has a price type which determines the type of transaction the seller would like to perform. Must be a valid price type identifier from the list.'
          example: 'FIXED_PRICE'
        currency:
          type: string
          description: 'The 3 letter ISO-4217 currency code.'
          example: 'EUR'
          readOnly: true
          format: iso-4217
        priceUnit:
          $ref: '#/components/schemas/AdPriceUnitResponse'
        price:
          type: integer
          format: int64
          description: 'The cost of the item, in cents. The meaning of the value depends on priceType. If it is FIXED_PRICE or BIDDING_FROM then price has to be greater than 0.'
          maximum: 100000000
        cpc:
          type: integer
          format: int64
          description: 'The cost per click (in cents) as defined by the seller. The minimum and maximum values depend on the category. The values can be retrieved from [the categories endpoint](#/paths/categories/get).'
          required: true
          example: 15
          minimum: 1
        totalBudget:
          type: integer
          format: int64
          description: 'The total budget for the ad, in cents. The minimum and maximum values depend on the category. When an ad is updated this value cannot be lower than the spentBudget. If the total budget is not returned with the ad, it means there is an unlimited total budget.'
          example: 5000
        dailyBudget:
          type: integer
          format: int64
          nullable: true
          description: 'The daily budget for the ad. When this value is reached the ad will be paused for the rest of the day. The minimum value depends on the category. Maximum value cannot be higher than the totalBudget'
          example: 50000
        spentBudget:
          type: integer
          format: int64
          readOnly: true
          description: 'The total amount of the budget that has been used so far, in cents.'
        dailySpent:
          type: integer
          format: int64
          readOnly: true
          description: 'The budget spent for the ad since midnight, in cents. Only provided when the dailyBudget is set and larger than 0.'
        salutation:
          type: string
          enum:
            - 'COMPANY'
            - 'MALE'
            - 'FEMALE'
            - 'FAMILY'
            - 'UNKNOWN'
          description: 'The salutation as used in emails. Must be a valid salutation identifier from MALE, FEMALE, COMPANY or FAMILY'
          example: 'COMPANY'
          required: true
        sellerName:
          type: string
          maxLength: 60
          required: true
          example: 'Mr. Smith'
          description: 'Display name of the seller.'
        phoneNumber:
          maxLength: 32
          description: 'The phone number of the advertiser as international phone number format, or as a local phone number. 0900 and 0800 numbers are not allowed.'
          example: '+31207894561'
        allowContactByEmail:
          type: boolean
          example: true
          description: 'Flag for allowing emails to be sent to the advertiser.'
        allowPayPal:
          deprecated: true
          description: 'Flag for allowing PayPal as a payment option.'
          example: false
        dateCreated:
          type: string
          format: date-time
          description: 'The ISO 8601 UTC date and time the ad was created.'
          readOnly: true
          example: '2019-04-18T13:55:10Z'
        dateLastUpdated:
          type: string
          format: date-time
          description: 'The ISO 8601 UTC date and time the ad was last updated.'
          readOnly: true
          example: '2020-08-05T07:49:14Z'
        dateDeleted:
          type: string
          format: date-time
          description: 'The ISO 8601 UTC date and time the ad was deleted. Omitted if the ad is not deleted.'
          readOnly: true
          example: '2020-08-05T07:49:14Z'
        postcode:
          type: string
          description: 'Must be an non empty string.'
          example: '1703 GB'
          maxLength: 6
          required: true
        regionId:
          type: integer
          format: int64
          description: 'The region in which the ad is placed. A long value from the region tree. Must be the id of a leaf region. Each ad belongs to one and only one region and region of an ad cannot be updated. This field can only set once during creation of an ad. This field is mandatory if the region field of category configuration is MANDATORY and optional if the region field is OPTIONAL. This field must be omitted if the region field of category configuration is DISABLED.'
          example: 10034535
        pageNumber:
          type: integer
          format: int
          description: 'Page number on which this ad is shown. Page number is highly volatile and might change very quickly depending on the performance of the ad.'
          readOnly: true
          example: 2
        suggestedCpcForPageOne:
          description: 'Suggested CPC value in (euro/dollar) cents for this ad to be shown on page one. This value is very volatile and might change very quickly depending on the performance of the ad.'
          type: integer
          format: int64
          example: 15
          readOnly: true
        links:
          type: object
          description: 'Provides various hypermedia URLs to access linked resources. Also contains a self link, which points to the current resource.'
          properties:
            self:
              type: string
              format: url
              example: '/api/sellside/ad/1235'
              description: 'A self link which points to the current resource.'
              maxLength: 2048
              readOnly: true
            category:
              type: integer
              format: int64
              description: 'The resource location for the category that this ad belongs to.'
              example: '/api/sellside/category/2353465'
              readOnly: true
              maxLength: 2048
            url:
              type: string
              format: url
              maxLength: 2048
              description: 'An external URL that is shown on the ad page. This must be a valid http(s) url.'
              example: 'http://wwww.company.com/product'
            displayUrl:
              description: 'The text/url that will be displayed instead of the url in links.url.'
              type: string
              maxLength: 256
              example: 'Click here to buy this product'
        vendorId:
          type: string
          description: 'Any non-empty string, unique per customer. Can either be set when creating an ad or when updating an existing ad. However, once set, it can no longer be modified. When fetching an existing ad which does not have a vendorId, the field is omitted.'
          example: 'OURSHOP-1423453-34'
        attributes:
          type: array
          description: 'An optional list of user-defined attributes'
          items:
            $ref: '#/components/schemas/UserAttribute'
        shippingOptions:
          example:
            - type: 'SHIP'
              cost: 0
              time: 2d-5d
            - type: 'PICKUP'
              pickupLocation: '1097DN'
          type: array
          items:
            $ref: '#/components/schemas/ShippingOption'
          description: 'A list of shipping options available for an ad. Ads can contain maximum one shipping option per shipping option type. Whether shipping options are disabled/optional/mandatory for an ad is configured per category.'
    AdV3Request:
      $ref: '#/components/schemas/AdV2Request' # they are the same
    AdV5Request:
      required:
        - title
        - description
        - categoryId
        - status
        - price
        - priceType
        - salutation
        - sellerName
        - postcode
        - shippingOptions
        - bidMicros
        - budgets
        - currency
      properties:
        title:
          type: string
          description: 'Any string, with minimum and maximum length determined by the category. URLs are not allowed as part of the title.'
          required: true
          example: 'Buy the new iPhone here'
        description:
          type: string
          description: 'The description field of the ad. Any string, with minimum and maximum length determined by the category. URLs are not allowed as part of the title.'
          required: true
          example: 'Extra sale, buy the new iPhone today and save!'
        images:
          type: array
          items:
            $ref: '#/components/schemas/ImageRequest'
        categoryId:
          description: 'The category in which the ad is placed. Each ad belongs to one and only one region and region of an ad cannot be updated. This field can only set once during creation of an ad.'
          type: integer
          format: int64
          required: true
          example: 2353465
          minimum: 0
        status:
          $ref: '#/components/schemas/AdStatusV2Request'
        price:
          $ref: '#/components/schemas/AdPriceResponse'
        campaignId:
          $ref: '#/components/schemas/AdCampaignIdResponse'
        salutation:
          type: string
          enum:
            - 'COMPANY'
            - 'MALE'
            - 'FEMALE'
            - 'FAMILY'
            - 'UNKNOWN'
          description: 'The salutation as used in emails. Must be a valid salutation identifier from MALE, FEMALE, COMPANY or FAMILY'
          example: 'COMPANY'
          required: true
        sellerName:
          type: string
          maxLength: 60
          required: true
          example: 'Mr. Smith'
          description: 'Display name of the seller.'
        phoneNumber:
          maxLength: 32
          description: 'The phone number of the advertiser as international phone number format, or as a local phone number. 0900 and 0800 numbers are not allowed.'
          example: '+31207894561'
        allowContactByEmail:
          type: boolean
          example: true
          description: 'Flag for allowing emails to be sent to the advertiser.'
        dateCreated:
          type: string
          format: date-time
          description: 'The ISO 8601 UTC date and time the ad was created.'
          readOnly: true
          example: '2019-04-18T13:55:10Z'
        dateLastUpdated:
          type: string
          format: date-time
          description: 'The ISO 8601 UTC date and time the ad was last updated.'
          readOnly: true
          example: '2020-08-05T07:49:14Z'
        dateDeleted:
          type: string
          format: date-time
          description: 'The ISO 8601 UTC date and time the ad was deleted. Omitted if the ad is not deleted.'
          readOnly: true
          example: '2020-08-05T07:49:14Z'
        postcode:
          type: string
          description: 'Must be an non empty string.'
          example: '1703 GB'
          maxLength: 6
          required: true
        regionId:
          type: integer
          format: int64
          writeOnly: true
          description: 'The region in which the ad is placed. A long value from the region tree. Must be the id of a leaf region. Each ad belongs to one and only one region and region of an ad cannot be updated. This field can only set once during creation of an ad. This field is mandatory if the region field of category configuration is MANDATORY and optional if the region field is OPTIONAL. This field must be omitted if the region field of category configuration is DISABLED.'
          example: 10034535
        bidMicros:
          type: string
          description: 'The cost per click (bid) in micro-euros/micro-dollars as defined by the seller (10000 micro-euros == 1 cent). The minimum and maximum values depend on the category. The values can be retrieved from [the categories endpoint](#/paths/categories/get).
          <br>
          The type is string, allowing the seller to specify “AUTOMATIC”, to let our system take care of the bid and try to optimise costs vs clicks.'
          required: true
          example: '10000'
          minimum: 1
        budgets:
          $ref: '#/components/schemas/AdBudgetsRequest'
        links:
          type: object
          description: 'Provides various hypermedia URLs to access linked resources.'
          properties:
            self:
              type: string
              format: url
              example: '/api/sellside/ad/1235'
              description: 'A self link which points to the current resource.'
              maxLength: 2048
              readOnly: true
            category:
              type: integer
              format: int64
              description: 'The resource location for the category that this ad belongs to.'
              example: '/api/sellside/category/2353465'
              readOnly: true
              maxLength: 2048
            url:
              type: string
              format: url
              maxLength: 2048
              description: 'An external URL that is shown on the ad page. This must be a valid http(s) url.'
              example: 'http://wwww.company.com/product'
            displayUrl:
              description: 'The text/url that will be displayed instead of the url in links.url.'
              type: string
              maxLength: 256
              example: 'Click here to buy this product'
        vendorId:
          type: string
          description: 'Any non-empty string, unique per customer. Can either be set when creating an ad or when updating an existing ad. However, once set, it can no longer be modified. When fetching an existing ad which does not have a vendorId, the field is omitted.'
          example: 'OURSHOP-1423453-34'
        attributes:
          type: array
          description: 'An optional list of user-defined attributes'
          items:
            $ref: '#/components/schemas/UserAttribute'
        shippingOptions:
          example:
            - type: 'SHIP'
              cost: 0
              time: '2d-5d'
            - type: 'PICKUP'
              pickupLocation: '1097DN'
          type: array
          items:
            $ref: '#/components/schemas/ShippingOption'
          description: 'A list of shipping options available for an ad. Ads can contain maximum one shipping option per shipping option type. Whether shipping options are disabled/optional/mandatory for an ad is configured per category.'
      type: object
    AdStatusV2Response:
      type: string
      readOnly: true
      description: 'The current ad status. Each ad can be in one of the listed states.'
      enum:
        - 'ACTIVE'
        - 'PAUSED'
        - 'BUDGET_REACHED'
        - 'DAILY_BUDGET_REACHED'
        - 'DELETED'
        - 'DELETED_BY_CS'
        - 'SUSPENDED_BY_CS'
      example: 'PAUSED'
    AdStatusV2Request:
      type: string
      required: true
      description: 'The ad status as desired and controlled by the user.'
      enum:
        - 'ACTIVE'
        - 'PAUSED'
        - 'DELETED'
      example: 'ACTIVE'
    AdStatusV5Response:
      type: string
      readOnly: true
      description: 'The current ad status. Each ad can be in one of the listed states. <br> The ad will be put from ``DOMAIN_PENDING`` to ``ACTIVE`` after the seller confirms the domain the links.url is pointing to. The first time a seller uses a new domain, they will receive an email to confirm they want to create an ad directing people to that domain (for security reasons).'
      enum:
        - 'ACTIVE'
        - 'PAUSED'
        - 'BUDGET_REACHED'
        - 'DAILY_BUDGET_REACHED'
        - 'DELETED'
        - 'DELETED_BY_CS'
        - 'SUSPENDED_BY_CS'
        - 'DOMAIN_PENDING'
      example: 'ACTIVE'
    OrderByGetAdsParam:
      type: string
      required: false
      description: 'Orders the result set by the given field. Default value is DATE_CREATED. (v5)'
      enum:
        - 'DATE_CREATED'
        - 'DATE_LAST_UPDATED'
        - 'STATUS'
        - 'CLICKS'
        - 'TITLE'
        - 'CPC'
        - 'SPENT'
        - 'REMAINING_BUDGET'
        - 'AD_ID'
      example: 'DATE_CREATED'
      default: 'DATE_CREATED'
    DirectionGetAdsRequest:
      type: string
      description: 'Determines the direction of the sort.'
      enum:
        - 'ASCENDING'
        - 'DESCENDING'
      example: 'DESCENDING'
      default: 'ASCENDING'
    ChangedSinceGetAdsRequest:
      type: string
      format: date-time
      description: 'Retrieve only ads whose date of last update is newer, or equal to, this ISO 8601 UTC timestamp, that is in the past.
      <br><br>
      Filtering by ``status`` and ``titleKeyword`` may be used but ``orderBy`` and ``direction`` cannot be changed since this would break the pagination.'
      example: '2019-04-18T13:55:10Z'
    AdV2Response:
      deprecated: true
      readOnly: true
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 1235
          minimum: 0
          description: 'Unique reference to the iCAS ad, needs to be omitted in a POST or PUT action.'
        title:
          type: string
          description: 'Any string, with minimum and maximum length determined by the category. URLs are not allowed as part of the title.'
          required: true
          example: 'Buy the new iPhone here'
        description:
          type: string
          description: 'The description field of the ad. Any string, with minimum and maximum length determined by the category. URLs are not allowed as part of the title.'
          required: true
          example: 'Extra sale, buy the new iPhone today and save!'
        categoryId:
          description: 'The category in which the ad is placed. Each ad belongs to one and only one region and region of an ad cannot be updated. This field can only set once during creation of an ad.'
          type: integer
          format: int64
          required: true
          example: 2353465
          minimum: 0
        images:
          type: array
          items:
            $ref: '#/components/schemas/ImageResponse'
        externalId:
          type: string
          maxLength: 64
          description: 'Any non-empty string with a maximum length of 64 characters. When fetching an existing ad which does not have an externalId, the field is empty or omitted.'
          example: 'OURSHOP-1423453-34'
          deprecated: true
        status:
          $ref: '#/components/schemas/AdStatusV2Response'
        priceType:
          type: string
          required: true
          enum:
            - 'BIDDING'
            - 'BIDDING_FROM'
            - 'FIXED_PRICE'
            - 'FREE'
            - 'NEGOTIABLE'
            - 'SEE_DESCRIPTION'
            - 'SWAP'
            - 'CREDIBLE_BID'
            - 'ON_DEMAND'
          description: 'Each ad has a price type which determines the type of transaction the seller would like to perform. Must be a valid price type identifier from the list.'
          example: 'FIXED_PRICE'
        currency:
          type: string
          description: 'The 3 letter ISO-4217 currency code.'
          example: 'EUR'
          readOnly: true
          format: iso-4217
        priceUnit:
          $ref: '#/components/schemas/AdPriceUnitResponse'
        price:
          type: integer
          format: int64
          description: 'The meaning of the value depends on priceType. If it is FIXED_PRICE or BIDDING_FROM then price has to be greater than 0. '
          maximum: 100000000
        cpc:
          type: integer
          format: int64
          description: 'The cost per click as defined by the seller. The minimum and maximum values depend on the category.'
          required: true
          example: 15
          minimum: 1
        totalBudget:
          type: integer
          format: int64
          description: 'The total budget for the ad, in cents. The minimum and maximum values depend on the category. When an ad is updated this value cannot be lower than the spentBudget. If the total budget is not returned with the ad, it means there is an unlimited total budget.'
          example: 5000
        dailyBudget:
          type: integer
          format: int64
          nullable: true
          description: 'The daily budget for the ad. When this value is reached the ad will be paused for the rest of the day. The minimum value depends on the category. Maximum value cannot be higher than the totalBudget'
          example: 50000
        spentBudget:
          type: integer
          format: int64
          readOnly: true
          description: 'The total amount of the budget that has been used so far, in cents.'
        dailySpent:
          type: integer
          format: int64
          readOnly: true
          description: 'The budget spent for the ad since midnight, in cents. Only provided when the dailyBudget is set and larger than 0.'
        salutation:
          type: string
          enum:
            - 'COMPANY'
            - 'MALE'
            - 'FEMALE'
            - 'FAMILY'
            - 'UNKNOWN'
          description: 'The salutation as used in emails. Must be a valid salutation identifier from MALE, FEMALE, COMPANY or FAMILY'
          example: 'COMPANY'
          required: true
        sellerName:
          type: string
          maxLength: 60
          required: true
          example: 'Mr. Smith'
          description: 'Display name of the seller.'
        phoneNumber:
          maxLength: 32
          description: 'The phone number of the advertiser as international phone number format, or as a local phone number. 0900 and 0800 numbers are not allowed.'
          example: '+31207894561'
        allowContactByEmail:
          type: boolean
          example: true
          description: 'Flag for allowing emails to be sent to the advertiser.'
        allowPayPal:
          deprecated: true
          description: 'Flag for allowing PayPal as a payment option.'
          example: false
        dateCreated:
          type: string
          format: date-time
          description: 'The ISO 8601 UTC date and time the ad was created.'
          readOnly: true
          example: '2019-04-18T13:55:10Z'
        dateLastUpdated:
          type: string
          format: date-time
          description: 'The ISO 8601 UTC date and time the ad was last updated.'
          readOnly: true
          example: '2020-08-05T07:49:14Z'
        dateDeleted:
          type: string
          format: date-time
          description: 'The ISO 8601 UTC date and time the ad was deleted. Omitted if the ad is not deleted.'
          readOnly: true
          example: '2020-08-05T07:49:14Z'
        postcode:
          type: string
          description: 'Must be an non empty string.'
          example: '1703 GB'
          maxLength: 6
          required: true
        regionId:
          type: integer
          format: int64
          description: 'The region in which the ad is placed. A long value from the region tree. Must be the id of a leaf region. Each ad belongs to one and only one region and region of an ad cannot be updated. This field can only set once during creation of an ad. This field is mandatory if the region field of category configuration is MANDATORY and optional if the region field is OPTIONAL. This field must be omitted if the region field of category configuration is DISABLED.'
          example: 10034535
        pageNumber:
          type: integer
          format: int
          description: 'Page number on which this ad is shown. Page number is highly volatile and might change very quickly depending on the performance of the ad.'
          readOnly: true
          example: 2
        suggestedCpcForPageOne:
          description: 'Suggested CPC value in (euro/dollar) cents for this ad to be shown on page one. This value is very volatile and might change very quickly depending on the performance of the ad.'
          type: integer
          format: int64
          example: 15
          readOnly: true
        links:
          type: object
          description: 'Provides various hypermedia URLs to access linked resources. Also contains a self link, which points to the current resource.'
          properties:
            self:
              type: string
              format: url
              example: '/api/sellside/ad/1235'
              description: 'A self link which points to the current resource.'
              maxLength: 2048
              readOnly: true
            category:
              type: integer
              format: int64
              description: 'The resource location for the category that this ad belongs to.'
              example: '/api/sellside/category/2353465'
              readOnly: true
              maxLength: 2048
            url:
              type: string
              format: url
              maxLength: 2048
              description: 'An external URL that is shown on the ad page. This must be a valid http(s) url.'
              example: 'http://wwww.company.com/product'
            displayUrl:
              description: 'The text/url that will be displayed instead of the url in links.url.'
              type: string
              maxLength: 256
              example: 'Click here to buy this product'
        vendorId:
          type: string
          description: 'Any non-empty string, unique per customer. Can either be set when creating an ad or when updating an existing ad. However, once set, it can no longer be modified. When fetching an existing ad which does not have a vendorId, the field is omitted.'
          example: 'OURSHOP-1423453-34'
        attributes:
          type: array
          description: 'An optional list of user-defined attributes'
          items:
            $ref: '#/components/schemas/UserAttribute'
        shippingOptions:
          example:
            - type: 'SHIP'
              cost: 0
              time: '2d-5d'
            - type: 'PICKUP'
              pickupLocation: '1097DN'
          type: array
          items:
            $ref: '#/components/schemas/ShippingOption'
          description: 'A list of shipping options available for an ad. Ads can contain maximum one shipping option per shipping option type. Whether shipping options are disabled/optional/mandatory for an ad is configured per category.'
    AdV3Response:
      type: object
      deprecated: true
      readOnly: true
      properties:
        id:
          type: integer
          format: int64
          required: true
          example: 1235
          minimum: 0
          description: 'Unique reference to the iCAS ad, needs to be omitted in a POST action.'
        title:
          type: string
          description: 'Any string, with minimum and maximum length determined by the category. URLs are not allowed as part of the title.'
          required: true
          example: 'Buy the new iPhone here'
        description:
          type: string
          description: 'The description field of the ad. Any string, with minimum and maximum length determined by the category. URLs are not allowed as part of the title.'
          required: true
          example: 'Extra sale, buy the new iPhone today and save!'
        images:
          type: array
          items:
            $ref: '#/components/schemas/ImageResponse'
        categoryId:
          description: 'The category in which the ad is placed. Each ad belongs to one and only one region and region of an ad cannot be updated. This field can only set once during creation of an ad.'
          type: integer
          format: int64
          required: true
          example: 2353465
          minimum: 0
        externalId:
          type: string
          maxLength: 64
          description: 'Any non-empty string with a maximum length of 64 characters. When fetching an existing ad which does not have an externalId, the field is empty or omitted.'
          example: 'OURSHOP-1423453-34'
          deprecated: true
        status:
          $ref: '#/components/schemas/AdStatusV2Response'
        statusReasons:
          type: array
          description: 'Currently used to indicate the reason why a certain ad might be set to a certain status by our system. This could be due to, for example, an action (like new website domain approval) pending from the user, which is a mechanism used to prevent account takeovers from setting the website URL to a malicious one.'
          items:
            type: string
          minItems: 0
          example:
            - 'DOMAIN_PENDING'
        priceType:
          $ref: '#/components/schemas/AdPriceTypeResponse'
        currency:
          type: string
          description: 'The 3 letter ISO-4217 currency code.'
          example: 'EUR'
          readOnly: true
          format: iso-4217
        priceUnit:
          $ref: '#/components/schemas/AdPriceUnitResponse'
        price:
          type: integer
          format: int64
          description: 'The meaning of the value depends on priceType. If it is FIXED_PRICE or BIDDING_FROM then price has to be greater than 0. '
          maximum: 100000000
        cpc:
          type: integer
          format: int64
          description: 'The cost per click as defined by the seller. The minimum and maximum values depend on the category.'
          required: true
          example: 15
          minimum: 1
        totalBudget:
          type: integer
          format: int64
          description: 'The total budget for the ad, in cents. The minimum and maximum values depend on the category. When an ad is updated this value cannot be lower than the spentBudget. If the total budget is not returned with the ad, it means there is an unlimited total budget.'
          example: 5000
        dailyBudget:
          type: integer
          format: int64
          nullable: true
          description: 'The daily budget for the ad,in cents. When this value is reached the ad will be paused for the rest of the day. The minimum value depends on the category. Maximum value cannot be higher than the totalBudget'
          example: 50000
        spentBudget:
          type: integer
          format: int64
          readOnly: true
          description: 'The total amount of the budget that has been used so far, in cents.'
        dailySpent:
          type: integer
          format: int64
          readOnly: true
          description: 'The budget spent for the ad since midnight, in cents. Only provided when the dailyBudget is set and larger than 0.'
        salutation:
          type: string
          enum:
            - 'COMPANY'
            - 'MALE'
            - 'FEMALE'
            - 'FAMILY'
            - 'UNKNOWN'
          description: 'The salutation as used in emails. Must be a valid salutation identifier from MALE, FEMALE, COMPANY or FAMILY'
          example: 'COMPANY'
          required: true
        sellerName:
          type: string
          maxLength: 60
          required: true
          example: 'Mr. Smith'
          description: 'Display name of the seller.'
        phoneNumber:
          maxLength: 32
          description: 'The phone number of the advertiser as international phone number format, or as a local phone number. 0900 and 0800 numbers are not allowed.'
          example: '+31207894561'
        allowContactByEmail:
          type: boolean
          example: true
          description: 'Flag for allowing emails to be sent to the advertiser.'
        allowPayPal:
          deprecated: true
          description: 'Flag for allowing PayPal as a payment option.'
          example: false
        dateCreated:
          type: string
          format: date-time
          description: 'The ISO 8601 UTC date and time the ad was created.'
          readOnly: true
          example: '2019-04-18T13:55:10Z'
        dateLastUpdated:
          type: string
          format: date-time
          description: 'The ISO 8601 UTC date and time the ad was last updated.'
          readOnly: true
          example: '2020-08-05T07:49:14Z'
        dateDeleted:
          type: string
          format: date-time
          description: 'The ISO 8601 UTC date and time the ad was deleted. Omitted if the ad is not deleted.'
          readOnly: true
          example: '2020-08-05T07:49:14Z'
        postcode:
          type: string
          description: 'Must be an non empty string.'
          example: '1703 GB'
          maxLength: 6
          required: true
        regionId:
          type: integer
          format: int64
          description: 'The region in which the ad is placed. A long value from the region tree. Must be the id of a leaf region. Each ad belongs to one and only one region and region of an ad cannot be updated. 
          This field can only set once during creation of an ad. This field is mandatory if the region field of category configuration is MANDATORY and optional if the region field is OPTIONAL. This field must be omitted if the region field of category configuration is DISABLED.
          The region tree can be retrieved with [the regions endpoint](#/paths/regions/get).'
          example: 10034535
        pageNumber:
          type: integer
          format: int
          description: 'Page number on which this ad is shown. Page number is highly volatile and might change very quickly depending on the performance of the ad.'
          readOnly: true
          example: 2
        suggestedCpcForPageOne:
          description: 'Suggested CPC value in (euro/dollar) cents for this ad to be shown on page one. This value is very volatile and might change very quickly depending on the performance of the ad.'
          type: integer
          format: int64
          example: 15
          readOnly: true
        links:
          type: object
          description: 'Provides various hypermedia URLs to access linked resources. Also contains a self link, which points to the current resource.'
          properties:
            self:
              type: string
              format: url
              example: '/api/sellside/ad/1235'
              description: 'A self link which points to the current resource.'
              maxLength: 2048
              readOnly: true
            category:
              type: integer
              format: int64
              description: 'The resource location for the category that this ad belongs to.'
              example: '/api/sellside/category/2353465'
              readOnly: true
              maxLength: 2048
            url:
              type: string
              format: url
              maxLength: 2048
              description: 'An external URL that is shown on the ad page. This must be a valid http(s) url.'
              example: 'http://wwww.company.com/product'
            displayUrl:
              description: 'The text/url that will be displayed instead of the url in links.url.'
              type: string
              maxLength: 256
              example: 'Click here to buy this product'
        vendorId:
          type: string
          description: 'Any non-empty string, unique per customer. Can either be set when creating an ad or when updating an existing ad. However, once set, it can no longer be modified. When fetching an existing ad which does not have a vendorId, the field is omitted.'
          example: 'OURSHOP-1423453-34'
        attributes:
          type: array
          description: 'An optional list of user-defined attributes'
          items:
            $ref: '#/components/schemas/UserAttribute'
        shippingOptions:
          example:
            - type: 'SHIP'
              cost: 0
              time: '2d-5d'
            - type: 'PICKUP'
              pickupLocation: '1097DN'
          type: array
          items:
            $ref: '#/components/schemas/ShippingOption'
          description: 'A list of shipping options available for an ad. Ads can contain maximum one shipping option per shipping option type. Whether shipping options are disabled/optional/mandatory for an ad is configured per category.'
    AdV5Response:
      readOnly: true
      properties:
        id:
          type: integer
          format: int64
          required: true
          example: 1235
          minimum: 0
          description: 'Unique reference to the iCAS ad, needs to be omitted in a POST action.'
        title:
          type: string
          description: 'Any string, with minimum and maximum length determined by the category. URLs are not allowed as part of the title.'
          required: true
          example: 'Buy the new iPhone here'
        description:
          type: string
          description: 'The description field of the ad. Any string, with minimum and maximum length determined by the category. URLs are not allowed as part of the title.'
          required: true
          example: 'Extra sale, buy the new iPhone today and save!'
        images:
          type: array
          items:
            $ref: '#/components/schemas/ImageResponse'
        categoryId:
          description: 'The category in which the ad is placed. Each ad belongs to one and only one region and region of an ad cannot be updated. This field can only set once during creation of an ad.'
          type: integer
          format: int64
          required: true
          example: 2353465
          minimum: 0
        status:
          $ref: '#/components/schemas/AdStatusV5Response'
        price:
          $ref: '#/components/schemas/AdPriceResponse'
        campaignId:
          $ref: '#/components/schemas/AdCampaignIdResponse'
        salutation:
          type: string
          enum:
            - 'COMPANY'
            - 'MALE'
            - 'FEMALE'
            - 'FAMILY'
            - 'UNKNOWN'
          description: 'The salutation as used in emails. Must be a valid salutation identifier from MALE, FEMALE, COMPANY or FAMILY'
          example: 'COMPANY'
          required: true
        sellerName:
          type: string
          maxLength: 60
          required: true
          example: 'Mr. Smith'
          description: 'Display name of the seller.'
        phoneNumber:
          maxLength: 32
          description: 'The phone number of the advertiser as international phone number format, or as a local phone number. 0900 and 0800 numbers are not allowed.'
          example: '+31207894561'
        allowContactByEmail:
          type: boolean
          example: true
          description: 'Flag for allowing emails to be sent to the advertiser.'
        dateCreated:
          type: string
          format: date-time
          description: 'The ISO 8601 UTC date and time the ad was created.'
          readOnly: true
          example: '2019-04-18T13:55:10Z'
        dateLastUpdated:
          type: string
          format: date-time
          description: 'The ISO 8601 UTC date and time the ad was last updated.'
          readOnly: true
          example: '2020-08-05T07:49:14Z'
        dateDeleted:
          type: string
          format: date-time
          description: 'The ISO 8601 UTC date and time the ad was deleted. Omitted if the ad is not deleted.'
          readOnly: true
          example: '2020-08-05T07:49:14Z'
        postcode:
          type: string
          description: 'Must be an non empty string.'
          example: '1703 GB'
          maxLength: 6
          required: true
        regionId:
          type: integer
          format: int64
          description: 'The region in which the ad is placed. A long value from the region tree. Must be the id of a leaf region. Each ad belongs to one and only one region and region of an ad cannot be updated. This field can only set once during creation of an ad. This field is mandatory if the region field of category configuration is MANDATORY and optional if the region field is OPTIONAL. This field must be omitted if the region field of category configuration is DISABLED.'
          example: 10034535
        bidMicros:
          type: string
          description: 'The cost per click (bid) in micro-euros/micro-dollars as defined by the seller (10000 micro-euros == 1 cent). The minimum and maximum values depend on the category. The values can be retrieved from [the categories endpoint](#/paths/categories/get).
          <br>
          The type is string, allowing the seller to specify “AUTOMATIC”, to let our system take care of the bid and try to optimise costs vs clicks.'
          required: true
          example: '10000'
          minimum: 1
        budgets:
          $ref: '#/components/schemas/AdBudgetsResponse'
        links:
          type: object
          description: 'Provides various hypermedia URLs to access linked resources.'
          properties:
            self:
              type: string
              format: url
              example: '/api/sellside/ad/1235'
              description: 'A self link which points to the current resource.'
              maxLength: 2048
              readOnly: true
            category:
              type: integer
              format: int64
              description: 'The resource location for the category that this ad belongs to.'
              example: '/api/sellside/category/2353465'
              readOnly: true
              maxLength: 2048
            url:
              type: string
              format: url
              maxLength: 2048
              description: 'An external URL that is shown on the ad page. This must be a valid http(s) url.'
              example: 'http://wwww.company.com/product'
            displayUrl:
              description: 'The text/url that will be displayed instead of the url in links.url.'
              type: string
              maxLength: 256
              example: 'Click here to buy this product'
        vendorId:
          type: string
          description: 'Any non-empty string, unique per customer. Can either be set when creating an ad or when updating an existing ad. However, once set, it can no longer be modified. When fetching an existing ad which does not have a vendorId, the field is omitted.'
          example: 'OURSHOP-1423453-34'
        attributes:
          type: array
          description: 'An optional list of user-defined attributes'
          items:
            $ref: '#/components/schemas/UserAttribute'
        shippingOptions:
          example:
            - type: 'SHIP'
              cost: 0
              time: '2d-5d'
            - type: 'PICKUP'
              pickupLocation: '1097DN'
          type: array
          items:
            $ref: '#/components/schemas/ShippingOption'
          description: 'A list of shipping options available for an ad. Ads can contain maximum one shipping option per shipping option type. Whether shipping options are disabled/optional/mandatory for an ad is configured per category.'
      type: object
    AdPriceResponse:
      readOnly: true
      description: 'Price is an object containing all the information about the cost of the item for sale.'
      type: object
      properties:
        amountCents:
          description: 'The cost of the item (without shipping costs) in cents. The meaning of the value depends on `priceType`. <br>
          The value is a positive number only when the `priceType` is ``FIXED_PRICE`` or ``BIDDING_FROM``.'
          type: integer
          maximum: 10000000000
          example: 5600
        priceType:
          $ref: '#/components/schemas/AdPriceTypeResponse'
        priceUnit:
          $ref: '#/components/schemas/AdPriceUnitResponse'
        originalAmountCents:
          description: 'The cost of the item (without shipping costs) in cents, before discount was applied. Not available to all users. Needs to be larger than `amountCents`.'
          type: integer
          example: 6500
    AdPriceUnitResponse:
      type: string
      readOnly: true
      description: 'Must be a valid price unit identifier from the list of available price units of the category'
      example: 'per_sqm'
    AdPriceTypeResponse:
      type: string
      readOnly: true
      enum:
        - 'BIDDING'
        - 'BIDDING_FROM'
        - 'FIXED_PRICE'
        - 'FREE'
        - 'NEGOTIABLE'
        - 'SEE_DESCRIPTION'
        - 'SWAP'
        - 'CREDIBLE_BID'
        - 'ON_DEMAND'
      description: 'Each ad has a price type which determines the type of transaction the seller would like to perform. Must be a valid price type identifier from the list.'
      example: 'FIXED_PRICE'
    AdCampaignIdResponse:
      description: 'Identifier of the campaign this ad belongs to. For the time being, we create a campaign underwater if the seller has no campaign created yet, to ensure there is at least one for the seller, that each ad belongs to.'
      readOnly: true
      type: integer
      example: 54212
    AdBudgetsRequest:
      type: object
      description: 'A struct encapsulating both the daily and the total ad budget limits.'
      properties:
        daily:
          type: object
          description: 'A struct encapsulating the daily ad budget spending and limit.'
          properties:
            limitMicros:
              type: string
              description: 'The maximum amount this ad can spend today in micros, after which it will be taken offline for the remainder of the day. Can also be UNLIMITED.'
              example: 'UNLIMITED'
        total:
          type: object
          description: 'A struct encapsulating the total ad budget spending and limit.'
          properties:
            limitMicros:
              type: string
              description: 'the maximum amount this ad can spend in micros, after which it will be taken offline until the seller increases the limit.'
              example: '350000000'
    AdBudgetsResponse:
      type: object
      readOnly: true
      description: 'A struct encapsulating both the daily and the total ad budget spending and limits.'
      properties:
        daily:
          type: object
          description: 'A struct encapsulating the daily ad budget spending and limit.'
          properties:
            limitMicros:
              type: string
              description: 'The maximum amount this ad can spend today in micros, after which it will be taken offline for the remainder of the day. Can also be UNLIMITED.'
              example: 'UNLIMITED'
            spentMicros:
              description: 'The amount spent in micros on this ad in its lifetime. Will be ever increasing and cannot be reset.'
              type: string
              readOnly: true
              example: '1255000'
        total:
          type: object
          description: 'A struct encapsulating the total ad budget spending and limit.'
          properties:
            limitMicros:
              type: string
              description: 'the maximum amount this ad can spend in micros, after which it will be taken offline until the seller increases the limit.'
              example: '350000000'
            spentMicros:
              type: string
              readOnly: true
              description: 'the amount spent in micros on this ad in its lifetime. Will be ever increasing and cannot be reset.'
              example: '24370000'
    AdListV3Response:
      type: object
      readOnly: true
      properties:
        ads:
          type: array
          items:
            $ref: '#/components/schemas/AdV3Response'
        count:
          type: integer
          format: int64
          minimum: 0
          readOnly: true
          example: 1
    AdListV5Response:
      type: object
      readOnly: true
      properties:
        ads:
          type: array
          items:
            $ref: '#/components/schemas/AdV5Response'
        count:
          type: integer
          format: int64
          minimum: 0
          readOnly: true
          example: 1
        nextPageToken:
          description: 'Replaces the usage of the ‘offset’ parameter and allows the caller to paginate through a large list of ads more efficiently. In essence, it contains encoded information on where the returned result ended, so it can serve as additional filters in the call for the next result set, making that call more efficient.
          When a response does not contain a nextPageToken you have reached the last page of results and there are no more to fetch.
          '
          type: string
          example: 'eyJpZCI6MTAwMTgz'
    AdFunnelV1Response:
      type: object
      readOnly: true
      description: 'A struct encapsulating the ad performance prediction (funnel).'
      properties:
        cpc:
          type: number
          format: int64
          description: 'The provided CPC value in euro cents for which the prediction is made.'
          example: 50
        pageNumber:
          type: number
          format: int64
          description: 'The page on which the ad is displayed for the corresponding CPC value.'
          example: 3
        averageClicks:
          type: number
          format: int64
          description: 'The number of ad clicks predicted for the corresponding CPC value.'
          example: 100
        averageCpc:
          type: number
          format: int64
          description: 'The required cpc value which would place the ad on the first (browse) page.'
          example: 70
        averageImpressions:
          description: 'The number of ad impressions predicted for the corresponding CPC value.'
          type: number
          format: int64
          example: 3000
        averageUrlClicks:
          description: 'The number of ad URL clicks predicted for the corresponding CPC value.'
          type: number
          format: int64
          example: 400
        ctr:
          description: 'The CTR (click-through rate) predicted for the corresponding CPC value.'
          type: integer
          format: double
          example: 0.345
        urlCtr:
          description: 'The URL CTR predicted for the corresponding CPC value.'
          type: integer
          format: double
          example: 0.112
        maxCpc:
          description: 'The maximum cpc value that the ad can have. If ``cpc`` is greater than ``maxCpc`` then this ad does not perform well enough to be placed on page one.'
          type: number
          format: int64
          example: 600
    AdMappingExternalIdsV2Response:
      type: object
      readOnly: true
      description: 'A map of adIds for the current user to the externalId the ad has.'
      additionalProperties: # https://swagger.io/docs/specification/data-models/dictionaries/
        type: string
      example:
        "1000212125": "82800ef2-0c0c-4b12-a2f3-c5d4b860a00c"
        "1100885981": "123123-123123-123123"
        "1102986711": "82800ef2-0c0c-4b12-a2f3-c5d4b860a00c"
        "1104051271": "aaef367c-0206-440a-8acf-b0b4194b3558"
        "1001831750": "a797e372-498e-449b-9fd9-088e3ccfdb08"
        "1100886309": "123123-123123-123123"
        "1100886818": "123123-123123-123123"
        "1100887074": "123123-123123-123123"
    AdPrefillTemplateRequest:
      type: object
      required:
        - categoryId
        - attributes
      description: 'A request for an ad template prefill information. Retrieving prefill information is possible only for ads from categories that have defined identifying attributes. Identifying attributes are attributes that can uniquely identify advertised items. An example of identifying attribute is ISBN, which can be used to uniquely identify a specific version of a book.'
      properties:
        categoryId:
          type: integer
          description: 'The category ID for the prefill template.'
          example: 85
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/UserAttribute'
          description: 'An identifying attribute for the supplied category, for which prefill information is available.'
          example:
            - key: 'licensePlate'
              label: 'License Plate'
              locale: 'nl'
              type: 'STRING'
              value: '1CAS23'
    AdPrefillTemplateResponse:
      type: object
      readOnly: true
      description: 'A response of an ad prefill template.'
      properties:
        title:
          type: string
          description: 'Prefilled template title based on the requested category and attributes.'
          example: 'Citroen C5 2.0 HDI 81KW Break 2004 Grijs'
        categoryId:
          type: integer
          description: 'The category ID for the prefill template.'
          example: 85
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/UserAttribute'
          description: 'An identifying attribute for the supplied category, for which prefill information is available.'
          example:
            - key: 'color'
              label: 'Kleur'
              locale: 'nl'
              type: 'STRING'
              value: 'Zilver of Grijs'
              recognized: true
            - key: 'body'
              label: 'Carrosserie'
              locale: 'nl'
              type: 'STRING'
              value: 'Stationwagon'
              recognized: true
    NonLeafCategoryV5:
      type: object
      readOnly: true
      description: 'Non-leaf categories only serve as parent nodes for lower level categories. Ads cannot be placed within them and therefore they have no configuration related to ad placement.'
      properties:
        links:
          type: object
          properties:
            self:
              type: string
              example: '/api/sellside/category/856'
          description: 'A link to the current category and if level > 1 a link to the parent category.'
        id:
          description: 'Unique category id.'
          type: integer
          format: int64
          minimum: 1
          example: 856
        parentId:
          description: 'Id of the parent category.'
          type: integer
          format: int64
          minimum: 0
          example: 0
        level:
          description: 'Level at which the category is defined.'
          type: number
          minimum: 0
          example: 1
        path:
          description: 'Ids of all ancestors (except the root) and the current category separated by ``_``'
          type: string
          example: '856'
        locales:
          description: 'Locales for which the category is available.'
          type: array
          items:
            type: string
          example: [ 'en_US', 'nl_BE', 'fr_BE' ]
        label:
          description: 'Display name of the category, one entry per locale.'
          type: object
          properties:
            locale:
              type: string
            label:
              type: string
          example:
            'nl_NL': 'Vakantiehuizen'
        breadcrumbs:
          description: 'Labels of all of the ancestors (except the root) and the current category, one list per locale.'
          type: object
          properties:
            locale:
              type: string
            breadcrumbs:
              type: array
              items:
                type: string
          example:
            'nl_NL': [ 'Vakantie', 'Vakantiehuizen' ]
        status:
          description: 'The status of the category. Can be one of: ``ACTIVE``, ``CLOSED``, ``DELETED``. <br>
          A ``CLOSED`` category is visible but no ads can be placed.  This status should be used for leaf categories where no new ads are accepted and which are in transition to ``DELETED``.<br>
          A ``DELETED`` category is no longer visible and no ads can be placed in it. It is still possible for ads to be in this category but they can no longer be found through a category search.'
          type: string
          enum:
            - ACTIVE
            - CLOSED
            - DELETED
        children:
          type: array
          description: 'Ordered list of child categories.'
          items:
            $ref: '#/components/schemas/LeafCategoryV5'
    LeafCategoryV5:
      readOnly: true
      description: 'Leaf categories are the categories where ads can be placed. They have by definition no children. Leaf categories contain the full configuration for ads placed in this category.'
      properties:
        links:
          type: object
          properties:
            self:
              type: string
              example: '/api/sellside/category/863'
            parent:
              type: string
              example: '/api/sellside/category/856'
          description: 'A link to the current category and if level > 1 a link to the parent category.'
        id:
          description: 'Unique category id.'
          type: integer
          format: int64
          minimum: 1
          example: 863
        parentId:
          description: 'Id of the parent category.'
          type: integer
          format: int64
          minimum: 0
          example: 856
        level:
          description: 'Level at which the category is defined.'
          type: number
          minimum: 0
          example: 2
        path:
          description: 'Ids of all ancestors (except the root) and the current category separated by ``_``'
          type: string
          example: '856_863'
        locales:
          description: 'Locales for which the category is available.'
          type: array
          items:
            type: string
          example: [ 'en_US', 'nl_BE', 'fr_BE' ]
        label:
          description: 'Display name of the category, one entry per locale.'
          type: object
          properties:
            locale:
              type: string
            label:
              type: string
          example:
            'nl_NL': 'Vakantiehuizen | Duitsland'
        breadcrumbs:
          description: 'Labels of all of the ancestors (except the root) and the current category, one list per locale.'
          type: object
          properties:
            locale:
              type: string
            breadcrumbs:
              type: array
              items:
                type: string
          example:
            'nl_NL': [ 'Vakantie', 'Vakantiehuizen | Duitsland' ]
        status:
          description: 'The status of the category. Can be one of: ``ACTIVE``, ``CLOSED``, ``DELETED``. <br>
          A ``CLOSED`` category is visible but no ads can be placed.  This status should be used for leaf categories where no new ads are accepted and which are in transition to ``DELETED``.<br>
          A ``DELETED`` category is no longer visible and no ads can be placed in it. It is still possible for ads to be in this category but they can no longer be found through a category search.'
          type: string
          enum:
            - ACTIVE
            - CLOSED
            - DELETED
        suggestedCpcForPageOne:
          type: integer
          format: int64
          description: 'The estimated CPC (in cents) the current user needs to set on a new ad in this category to be placed on page 1 for a browse action in the leaf category.'
          example: 5
          deprecated: true
        config:
          type: object
          description: 'The category configuration, only available for leaf categories.'
          properties:
            priceType:
              type: array
              items:
                type: string
              example: [
                'BIDDING',
                'BIDDING_FROM',
                'FIXED_PRICE',
                'FREE',
                'NEGOTIABLE',
                'SEE_DESCRIPTION',
                'SWAP',
                'CREDIBLE_BID',
                'ON_DEMAND',
                'RESERVED'
              ]
            bidMicros:
              description: 'Allowed bid value in micros for ads in this category.'
              type: string
              example: '[10000,2500000]'
            totalBudgetMicros:
              description: 'Allowed range for total budget in micros for ads in this category.'
              type: string
              example: '[1000000,2000000000000]'
            dailyBudgetMicros:
              description: 'Allowed range for daily budget in micros for ads in this category.'
              type: string
              example: '[10000000,2000000000000]'
            activeAds:
              description: 'Allowed range of active ads per seller in this category.'
              type: string
              example: '[1,100000]'
            images:
              description: 'Allowed range of images count for ads in this category.'
              type: string
              example: '[0,24]'
            titleLength:
              description: 'Allowed range of the title length for ads in this category.'
              type: string
              example: '[1,60]'
            descriptionLength:
              description: 'Allowed range of the description length for ads in this category.'
              type: string
              example: '[1,20000]'
            shippingOption:
              description: 'If ``DISABLED`` ads in this category cannot have shipping options, if ``OPTIONAL`` ads can have shipping options and if ``MANDATORY`` ads must have shipping options.'
              type: string
              enum:
                - 'DISABLED'
                - 'OPTIONAL'
                - 'MANDATORY'
              example: 'OPTIONAL'
            tags:
              description: 'Optional localized set of additional keywords that are indexed with ads in this category.'
              type: object
              properties:
                locale:
                  type: string
                keywords:
                  type: array
                  items:
                    type: string
              example:
                - 'nl_NL': [ 'Ring' ]
            verticals:
              description: 'Optional set of verticals (groups) this category belongs to.'
              type: array
              items:
                type: string
                enum:
                  - 'CARS'
                  - 'CONTACTS'
                  - 'JOBS'
                  - 'HOUSES'
                  - 'SERVICES'
                  - 'VACATIONS'
              example: [ 'HOUSES', 'VACATIONS' ]
            region:
              description: 'If ``DISABLED`` ads in this category cannot have regions, if ``OPTIONAL`` ads can have regions and if ``MANDATORY`` ads must have regions.'
              type: string
              example: 'DISABLED'
            relatedPaths:
              description: 'Optional set of paths from related existing categories used for search strategies and/or fallback scenarios to expand the search parameters when too few results are returned.'
              type: array
              items:
                type: string
              example: [ '1826_1827', '1826_18', '1826_13', '1826_19', '621_625' ]
            priceUnits:
              description: 'Optional set of localized price units like per m², per hour, etc. Maps an unique key to a set localized values.'
              type: object
              example:
                - 'per_night':
                    - 'nl_NL': 'per nacht'
        attributeGroups:
          description: 'Ordered list of attribute groups. Attribute groups combine a list of attributes with a label and an optional tooltip.<br>
           Multiple attribute groups allow the user interface to render multiple groups in separate blocks. Expect that attributes are rendered in the order given therefore the order in the attributes field matters. The same applies to the order of the attribute groups themselves.'
          type: array
          items:
            type: object
            properties:
              label:
                type: object
                description: 'Localized label of the attribute. One entry per locale'
                properties:
                  locale:
                    type: string
                  labels:
                    type: object
              tooltip:
                description: 'Optional tooltip/help text for the label. One entry per locale.'
                type: object
                properties:
                  locale:
                    type: string
                  labels:
                    type: object
              attributes:
                type: array
                description: 'Attributes define additional fields for ads in this category. The configuration parameters allow to render the attribute in a certain way depending on the ``type`` and the content of the ``values`` field.'
                items:
                  type: object
                  properties:
                    key:
                      description: 'Non-empty attribute key, unique in category.'
                      type: string
                      example: 'region'
                    label:
                      description: 'Localized label of the attribute. One entry per locale'
                      type: object
                      example:
                        'label':
                          'nl_NL': 'Regio'
                    tooltip:
                      description: 'Optional tooltip/help text for the label.'
                      type: object
                    type:
                      description: 'The attribute type. One of ``STRING``, ``NUMBER``, ``LIST`` or ``BOOL``.'
                      type: string
                      enum:
                        - 'STRING'
                        - 'NUMBER'
                        - 'LIST'
                        - 'BOOL'
                      example: 'STRING'
                    values:
                      type: object
                      description: 'Localized values for the attribute. The length of the JSON representation of all values for one locale must not exceed 512 bytes.'
                      properties:
                        locale:
                          type: string
                        localizedValueS:
                          type: array
                          items:
                            type: string
                          maxLength: 512
                    defaults:
                      description: 'Localized default value for required attributes.'
                      type: object
                      properties:
                        locale:
                          type: string
                        defaultValue:
                          type: string
                    mandatory:
                      type: boolean
                      description: 'Whether the attribute is mandatory.'
                      example: false
                    searchable:
                      type: boolean
                      description: 'Whether the attribute is indexed for search.'
                      example: true
                    updatable:
                      type: boolean
                      description: 'Whether the attribute can be changed after creation.'
                      example: true
                    writable:
                      type: boolean
                      description: 'Whether the attribute can be set during creation.'
                      example: true
                    identifying:
                      type: boolean
                      description: 'Whether this attribute could serve as an identifier for the entire item sold. This can be used in combination with [POST /ad/prefill](#paths./ad.post.prefill), where you can potentially get a sample title, description and additional attributes based on 3rd party databases.'
                      example: false
                    precision:
                      type: number
                      minimum: 0
                      description: 'Precision for ``NUMBER`` fields. 0 means value is an int. Default is 0. Note that floats with large precision values are difficult to compare.'
                      example: 0
                    range:
                      description: 'Range for ``NUMBER`` attributes.'
                      type: string
                    length:
                      description: 'Length range for ``STRING`` attributes without values.'
                      type: string
                    prefix:
                      type: object
                      description: 'Optional localized prefix for rendering.'
                    postfix:
                      type: object
                      description: 'Optional localized postfix for rendering.'
                    hints:
                      description: 'Optional list of rendering hints.'
                      type: array
                      items:
                        type: string
            example:
              - 'label':
                  'nl_NL': 'Kenmerken'
                'tooltip':
                  'nl_NL': 'Geef hier welk type advertentie u gaat maken en wat de conditie van uw product is'
                'attributes':
                  'key': 'region'
                  'label':
                    'nl_NL': 'Regio'
                  'tooltip': { }
                  'type': 'STRING'
                  'values':
                    'nl_NL': [ 'Nieuw', 'Zo goed als nieuw', 'Gebruikt' ]
                  'default':
                    'nl_NL': 'Nieuw'
                  'mandatory': false
                  'searchable': true
                  'updatable': true
                  'writable': true
                  'identifying': false
                  'precision': 0
                  'range': { }
                  'length': { }
                  'prefix': { }
                  'postfix': { }
                  'hints': [ ]
    NonLeafRegion:
      type: object
      readOnly: true
      description: 'Non-leaf regions serve as parent nodes for lower level regions. Ads cannot be placed within them and therefore they have no center point.'
      properties:
        links:
          type: object
          properties:
            self:
              type: string
              example: '/api/sellside/region/1700194'
            parent:
              type: string
              example: '/api/sellside/region/9009'
          description: 'A link to the current region and if level > 1 a link to the parent region.'
        id:
          description: 'Unique region id.'
          type: integer
          format: int64
          minimum: 1
          example: 1700194
        parentId:
          description: 'Id of the parent region.'
          type: integer
          format: int64
          minimum: 0
          example: 9009
        level:
          description: 'Level at which the region is defined.'
          type: number
          minimum: 0
          example: 2
        path:
          description: 'Ids of all ancestors (except the root) and the current region separated by ``_``'
          type: string
          example: '9009_1700194'
        label:
          description: 'Display name of the region, one entry per locale.'
          type: object
          properties:
            locale:
              type: string
            label:
              type: string
          example:
            'en_CA': 'Regina Area'
            'fr_CA': 'Regina Area'
        children:
          type: array
          description: 'Ordered list of child regions.'
          items:
            $ref: '#/components/schemas/LeafRegion'
    LeafRegion:
      readOnly: true
      description: 'Leaf regions are the regions where ads can be placed. They have by definition no children. Leaf regions have coordinates of the center point.'
      properties:
        links:
          type: object
          properties:
            self:
              type: string
              example: '/api/sellside/region/1700196'
            parent:
              type: string
              example: '/api/sellside/region/1700194'
          description: 'A link to the current region and if level > 1 a link to the parent region.'
        id:
          description: 'Unique region id.'
          type: integer
          format: int64
          minimum: 1
          example: 1700196
        parentId:
          description: 'Id of the parent region.'
          type: integer
          format: int64
          minimum: 0
          example: 1700194
        level:
          description: 'Level at which the region is defined.'
          type: number
          minimum: 0
          example: 2
        path:
          description: 'Ids of all ancestors (except the root) and the current region separated by ``_``'
          type: string
          example: '9009_1700194_1700196'
        center:
          description: 'Coordinates of the center of the region.'
          type: object
          properties:
            latitude:
              type: number
              format: double
              example: 50.448009
            longitude:
              type: number
              format: double
              example: -104.595177
        label:
          description: 'Display name of the region, one entry per locale.'
          type: object
          properties:
            locale:
              type: string
            label:
              type: string
          example:
            'en_CA': 'Regina Area'
            'fr_CA': 'Regina Area'
    CampaignStatusRequestV5:
      type: string
      required: true
      description: 'Each campaign can be set in one of a predefined set of user-controlled states.'
      enum:
        - 'ACTIVE'
        - 'PAUSED'
      example: 'ACTIVE'
    CampaignStatusResponseV5:
      type: string
      description: 'Each campaign can be set in one of a predefined set of states.'
      enum:
        - 'ACTIVE'
        - 'PAUSED'
        - 'BUDGET_REACHED'
        - 'DAILY_BUDGET_REACHED'
      example: 'ACTIVE'
    CampaignStatus:
      type: string
      required: true
      description: 'The current campaign status. The user can set only one of the user controlled states ACTIVE, PAUSED or DELETED.'
      enum:
        - 'ACTIVE'
        - 'PAUSED'
        - 'BUDGET_REACHED'
        - 'DELETED'
      example: 'ACTIVE'
    DailyBudget:
      type: object
      description: 'The maximum amount (in cents) that a campaign can spend per day (limit), and the current-day spent. The spent amount value will be reset at midnight every day. If not set, the limit will be shown as -1 (Unlimited).'
      properties:
        limit:
          type: integer
          format: int64
          example: 120
          description: 'The daily budget limit, in cents.'
          required: true
        spent:
          type: integer
          format: int64
          example: 120
          description: 'The current spent, in cents.'
          readOnly: true
      example:
        limit: 120
        spent: 20
    MonthlyBudget:
      type: object
      description: 'The maximum amount (in cents) that a campaign can spend per calendar month (limit), and the current-month spent. The spent amount value will be reset at midnight every 1st of the month. If not set, the limit will be shown as -1 (Unlimited).'
      properties:
        limit:
          type: integer
          format: int64
          example: 120
          description: 'The monthly budget limit, in cents.'
          required: true
        spent:
          type: integer
          format: int64
          example: 120
          description: 'The current spent, in cents.'
          readOnly: true
      example:
        limit: 1000
        spent: 30
    TotalBudget:
      type: object
      description: 'The maximum amount (in cents) that a campaign can spend in its lifetime, and the current total spent. The spent value will never be reset. If not set, the limit will be shown as -1 (Unlimited).'
      properties:
        limit:
          type: integer
          format: int64
          example: 120
          description: 'The total budget limit, in cents.'
          required: true
        spent:
          type: integer
          format: int64
          example: 120
          description: 'The total spent, in cents.'
          readOnly: true
      example:
        limit: -1
        spent: 30
    CampaignBudgetsResponseV5:
      description: 'An object containing the current budget limits and spent for this campaign. The unit for limit and spent is cents. The default limit values are set to -1 (Unlimited). If the campaign is DELETED, no budgets are shown.'
      properties:
        daily:
          $ref: '#/components/schemas/CampaignDailyBudgetResponseV5'
        total:
          $ref: '#/components/schemas/CampaignTotalBudgetResponseV5'
    CampaignDailyBudgetRequestV5:
      type: object
      required:
        - limitMicros
      description: 'The maximum amount all the ads combined in this campaign may spend per day. When this amount is reached, the ads in this campaign will remain offline for the rest of the day.'
      properties:
        limitMicros:
          type: string
          example: '10000000'
    CampaignTotalBudgetRequestV5:
      type: object
      required:
        - limitMicros
      description: 'The maximum amount all the ads combined in this campaign may spend. When this amount is reached, the ads in this campaign will remain offline until this limit has been increased.'
      properties:
        limitMicros:
          type: string
          example: 'UNLIMITED'
          default: 'UNLIMITED'
    CampaignDailyBudgetResponseV5:
      type: object
      description: 'The daily budget for the campaign, including the limit and the current spent.'
      properties:
        limitMicros:
          description: 'The maximum amount all the ads combined in this campaign may spend per day. When this amount is reached, the ads in this campaign will remain offline for the rest of the day.'
          type: string
          example: '10000000'
        spentMicros:
          description: 'The amount all the ads combined in this campaign have spent so far, today. This will be reset every day around midnight.'
          type: string
          example: '9520000'
    CampaignTotalBudgetResponseV5:
      type: object
      description: 'The total budget for the campaign, including the limit and the current spent.'
      properties:
        limitMicros:
          description: 'The maximum amount all the ads combined in this campaign may spend. When this amount is reached, the ads in this campaign will remain offline until this limit has been increased.'
          type: string
          example: 'UNLIMITED'
        spentMicros:
          description: 'The amount all the ads combined in this campaign have spent so far. This will never be reset.'
          type: string
          example: '124520000'

    FeedConfigV1Request:
      type: object
      description: 'Feed configuration of the current user.'
      properties:
        enabled:
          type: boolean
          description: 'Indicates whether the feed for the current user is enabled.'
          default: false
          example: true
        feedUrl:
          type: string
          description: 'Contains the configured feed URL for the current user.'
          example: 'http://www.ourshop.com/feed.xml'
          maxLength: 512
      required:
        - enabled
        - feedUrl
    FeedConfigV1Response:
      readOnly: true
      type: object
      description: 'Feed configuration of the current user.'
      properties:
        enabled:
          type: boolean
          description: 'Indicates whether the feed for the current user is enabled.'
          default: false
          example: true
        feedUrl:
          type: string
          description: 'Contains the configured feed URL for the current user.'
          example: 'http://www.ourshop.com/feed.xml'
          maxLength: 512
    CampaignBudgetsRequestV5:
      type: object
      description: 'An object containing the current budget limits for this campaign. If either of these run out, ads from this campaign will no longer be visible on site.
       The unit for limit and spent is cents. The default limit values are set to -1 (Unlimited).
       '
      properties:
        daily:
          $ref: '#/components/schemas/CampaignDailyBudgetRequestV5'
        total:
          $ref: '#/components/schemas/CampaignTotalBudgetRequestV5'
    CampaignBudgets:
      type: object
      description: 'An object containing the current budget limits and spent for this campaign. The unit for limit and spent is cents. The default limit values are set to -1 (Unlimited). If the campaign is DELETED, no budgets are shown.'
      properties:
        daily:
          $ref: '#/components/schemas/DailyBudget'
        monthly:
          $ref: '#/components/schemas/MonthlyBudget'
        total:
          $ref: '#/components/schemas/TotalBudget'
      example:
        daily:
          limit: 120
          spent: 20
        monthly:
          limit: 1000
          spent: 30
        total:
          limit: -1
          spent: 30
    GeoTargeting:
      description: 'Geo targeting allows you to specify one or more (circular) areas in the targeting criteria of a campaign to have the ads of that campaign only be shown to buyers located in any of the geographical areas specified.'
      type: array
      items:
        type: object
        properties:
          lat:
            type: number
            format: double
            example: 1.2345
            description: 'Latitude of the center-point of the circular area for geo-targeting'
            minimum: -90
            maximum: 90
          lon:
            type: number
            format: double
            example: 123.456
            description: 'Longitude of the center-point of the circular area for geo-targeting'
            minimum: -180
            maximum: 180
          radius:
            description: 'Radius (in km) of the circular area for geo-targeting'
            type: integer
            format: int64
            example: 10
    RegionTargeting:
      type: array
      items:
        type: integer
        format: int64
      description: 'A list of valid regionIds from the Regions taxonomy. Default is empty array or [0], either of which implies nationwide targeting (no targeting restrictions).'
      example:
        - 12300
        - 1000134
    CampaignRequestV5:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/CampaignStatusRequestV5'
        budgets:
          $ref: '#/components/schemas/CampaignBudgetsRequestV5'
    CampaignResponseV5:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1235
          minimum: 0
          readOnly: true
          description: 'Unique reference to the iCAS campaign.'
        dateCreated:
          type: string
          format: date-time
          description: 'The ISO 8601 UTC date and time the campaign was created.'
          readOnly: true
          example: '2019-04-18T13:55:10Z'
        dateLastUpdated:
          type: string
          format: dateTime
          example: '2018-07-26T14:56:51Z'
          readOnly: true
          description: 'The ISO 8601 UTC date and time the campaign was last updated.'
        status:
          $ref: '#/components/schemas/CampaignStatusResponseV5'
        budgets:
          $ref: '#/components/schemas/CampaignBudgetsResponseV5'
    CampaignV2:
      type: object
      deprecated: true
      properties:
        id:
          type: integer
          format: int64
          example: 1235
          minimum: 0
          description: 'Unique reference to the iCAS campaign, needs to be omitted in a POST action.'
        title:
          type: string
          example: 'My awesome campaign'
          description: 'A description of your campaign. Only visible on your dashboard, it will never be shown to buyers.'
          maxLength: 255
        dateCreated:
          type: string
          format: date-time
          description: 'The ISO 8601 UTC date and time the campaign was created.'
          readOnly: true
          example: '2019-04-18T13:55:10Z'
        dateLastUpdated:
          type: string
          format: dateTime
          example: '2018-07-26T14:56:51Z'
          readOnly: true
          description: 'The ISO 8601 UTC date and time the campaign was last updated.'
        status:
          $ref: '#/components/schemas/CampaignStatus'
        vendorId:
          type: string
          description: 'Any non-empty string, unique per customer. Can either be set when creating a campaign or when updating an existing one. However, once set, it can no longer be modified. When fetching an existing campaign which does not have a vendorId, the field is omitted.'
          example: 'OURSHOP-1423453-34'
        budgets:
          $ref: '#/components/schemas/CampaignBudgets'
        targeting:
          description: 'A Campaign Targeting Object, containing the targeting settings for this campaign. The default value is an empty targeting, indicating that the targeting is nationwide (no limitations). Geo-circles and regions cannot and should not be used in combination on the same campaign. This is currently not supported.'
          oneOf:
            - $ref: '#/components/schemas/GeoTargeting'
            - $ref: '#/components/schemas/RegionTargeting'
    MetricsReportV2:
      readOnly: true
      type: object
      properties:
        createDate:
          type: string
          format: time
          example: '2014-12-05T14:47:04Z'
          description: 'The date/time this report call got requested (in UTC ISO8601 format)'
        startDate:
          type: string
          format: date
          example: '2014-11-24'
          description: 'The start of the period this report covers. Tenant time zone is assumed.'
        endDate:
          type: string
          format: date
          example: '2014-11-25'
          description: 'The end of the period this report covers. Tenant time zone is assumed.'
        data:
          type: array
          description: 'The report data; each element in this array represents the data for an ad.'
          items:
            type: object
            properties:
              adId:
                type: integer
                format: int64
                description: 'Id of the ad to which the report row belongs to.'
                example: 1262
              bidMicros:
                type: integer
                format: int64
                description: 'Current bid value of the ad (in micros).'
                example: 10000
              cpc:
                type: integer
                format: int64
                deprecated: true
                description: 'CPC of the ad (in cents).'
                example: 5
              impressions:
                type: integer
                format: int64
                description: 'Number of impressions this ad received.'
                example: 73
              clicks:
                description: 'Number of clicks this ad received.'
                type: integer
                format: int64
                example: 43
              urlClicks:
                description: 'Number of url clicks this ad received.'
                type: integer
                format: int64
                example: 3
              emails:
                description: 'Number of email requests this ad received.'
                type: integer
                format: int64
                example: 1
              engagement:
                description: 'Number of engagements this ad received. Depending on the tenant, this could be the same as ``urlClicks``, or a summation of several metrics.'
                type: integer
                format: int64
                example: 22
              spentMicros:
                description: 'Total amount spent for this ad (in micros).'
                type: integer
                format: int64
                example: 430000
              totalSpent:
                deprecated: true
                description: 'Total amount spent for this ad (in cents).'
                type: integer
                format: int64
                example: 2000
              ctr:
                description: 'Click-through rate of the ad.'
                type: number
                format: double
                example: 0.589
              engagementCTR:
                description: 'Number of engagements leads from clicks this ad received.'
                type: number
                format: double
                example: 0.511
              websiteCTR:
                description: 'Number of website leads from clicks this ad received.'
                type: number
                format: double
                example: 0.43
              startDate:
                description: 'Creation date of the ad.'
                type: string
                format: time
                example: '1970-01-17T09:27:18Z'
              endDate:
                description: 'Deletion date of the ad if the ad is deleted, null otherwise.'
                type: string
                format: time
                example: null
              title:
                description: 'Title of the ad.'
                format: string
                example: 'Test Ad'
              categoryId:
                description: 'Category id of the ad.'
                type: number
                example: 573
              vendorId:
                description: 'Vendor id of the ad.'
                type: string
                example: 'vndr'
              dailyBudgetMicros:
                description: 'Daily limit of the ad (in micros).'
                type: integer
                format: int64
                example: 9990000
              dailyLimit:
                deprecated: true
                description: 'Daily limit of the ad (in cents).'
                type: integer
                format: int64
                example: 2000
              totalBudgetMicros:
                description: 'Total budget of the ad (in micros).'
                type: integer
                format: int64
              totalBudget:
                deprecated: true
                description: 'Total budget of the ad (in cents).'
                type: integer
                format: int64
                example: 5000
              relativePerformance:
                description: 'Returns the relative performance of the ad (on a scale of [1-100]) compared to competition within the ad’s category. Higher score means better performance. A score of 0 could indicate there is not enough data to infer the value at the moment.'
                type: integer
                example: 65
              eSpentMicros:
                description: 'Returns the effective cost per website click in micros'
                type: number
                format: double
                example: 4200
              eCPC:
                deprecated: true
                description: 'Returns the eCPC (effective cost per website click) in cents'
                type: number
                format: double
                example: 0.42
    MetricsReportV1:
      readOnly: true
      type: object
      properties:
        createDate:
          type: string
          format: time
          example: '2014-12-05T14:47:04Z'
          description: 'The date/time this report call got requested (in UTC ISO8601 format)'
        startDate:
          type: string
          format: date
          example: '2014-11-24'
          description: 'The start of the period this report covers. Tenant time zone is assumed.'
        endDate:
          type: string
          format: date
          example: '2014-11-25'
          description: 'The end of the period this report covers. Tenant time zone is assumed.'
        data:
          type: array
          description: 'The report data; each element in this array represents the data for an ad.'
          items:
            type: object
            properties:
              adId:
                type: integer
                format: int64
                description: 'Id of the ad to which the report row belongs to.'
                example: 1262
              cpc:
                type: integer
                format: int64
                description: 'CPC of the ad (in cents).'
                example: 5
              impressions:
                type: integer
                format: int64
                description: 'Number of impressions this ad received.'
                example: 73
              clicks:
                description: 'Number of clicks this ad received.'
                type: integer
                format: int64
                example: 43
              urlClicks:
                description: 'Number of url clicks this ad received.'
                type: integer
                format: int64
                example: 3
              emails:
                description: 'Number of email requests this ad received.'
                type: integer
                format: int64
                example: 1
              engagement:
                description: 'Number of engagements this ad received. Depending on the tenant, this could be the same as ``urlClicks``, or a summation of several metrics.'
                type: integer
                format: int64
                example: 22
              totalSpent:
                description: 'Total amount spent for this ad (in cents).'
                type: integer
                format: int64
                example: 2000
              ctr:
                description: 'Click-through rate of the ad.'
                type: number
                format: double
                example: 0.589
              engagementCTR:
                description: 'Number of engagements leads from clicks this ad received.'
                type: number
                format: double
                example: 0.511
              websiteCTR:
                description: 'Number of website leads from clicks this ad received.'
                type: number
                format: double
                example: 0.43
              startDate:
                description: 'Creation date of the ad.'
                type: string
                format: time
                example: '1970-01-17T09:27:18Z'
              endDate:
                description: 'Deletion date of the ad if the ad is deleted, null otherwise.'
                type: string
                format: time
                example: null
              title:
                description: 'Title of the ad.'
                format: string
                example: 'Test Ad'
              categoryId:
                description: 'Category id of the ad.'
                type: number
                example: 573
              vendorId:
                description: 'Vendor id of the ad.'
                type: string
                example: 'vndr'
              dailyLimit:
                description: 'Daily limit of the ad (in cents).'
                type: integer
                format: int64
                example: 2000
              totalBudget:
                description: 'Total budget of the ad (in cents).'
                type: integer
                format: int64
                example: 5000
              relativePerformance:
                description: 'Returns the relative performance of the ad (on a scale of [1-100]) compared to competition within the ad’s category. Higher score means better performance. A score of 0 could indicate there is not enough data to infer the value at the moment.'
                type: integer
                example: 65
              eCPC:
                description: 'Returns the eCPC (effective cost per website click) in cents'
                type: number
                format: double
                example: 0.42
    MetricsAdsV2:
      type: object
      readOnly: true
      properties:
        date:
          description: 'Date of the report row, grouped daily, weekly, monthly, or yearly. For daily and weekly aggregation the format is ``YYYY-MM-DD``, for monthly aggregation - ``YYYY-MM``, and for yearly - ``YYYY``. All dates are in tenant timezone.'
          type: string
          format: date
        adID:
          description: 'ID of the ad'
          type: integer
          format: int64
        L1Category:
          description: 'Level 1 category name'
          type: integer
          format: int64
        L2Category:
          description: 'Level 2 category name'
          type: integer
          format: int64
        L3Category:
          description: 'Level 3 category name, if applicable'
          type: integer
          format: int64
        title:
          description: 'Title of the ad'
          type: string
        startDate:
          description: 'Creation date of the ad'
          type: string
          format: date
        endDate:
          description: 'If the ad is deleted, deletion date of the ad'
          type: string
          format: date
        bidMicros:
          description: 'Bid of the ad for which performance metrics are calculated, in micros unit'
          type: integer
          format: int64
        spentMicros:
          description: 'Total amount spent for this ad, in micros unit'
          type: integer
          format: int64
        cpc:
          description: 'CPC of the ad for which performance metrics are calculated, in local currency'
          type: integer
          deprecated: true
        spent:
          description: 'Total amount spent for this ad, in Local Currency'
          type: integer
          deprecated: true
        clicks:
          description: 'Number of clicks that the ad received'
          type: integer
          format: int64
        impressions:
          description: 'Number of impressions that the ad received'
          type: integer
          format: int64
        viewCTR:
          description: 'Click-through rate in %'
          type: number
        websiteClicks:
          description: 'Number of URL clicks that the ad received'
          type: integer
          format: int64
        emails:
          description: 'Number of email events that the ad received'
          type: integer
          format: int64
        engagementCTR:
          description: 'Engagement conversion rate in %. Calculation: ``(URL clicks + Emails) / Clicks``'
          type: number
        region:
          description: 'Region name, of the ad'
          type: integer
          format: int64
        vendorID:
          description: 'Vendor ID of the ad'
          type: string
        externalURL:
          description: 'The external website URL of the ad, if provided'
          type: string
    MetricsDataRequestV2:
      required:
        - timeRanges
        - metrics
      type: object
      properties:
        timeRanges:
          description: 'This field is used to specify one ore more distinct time periods to fetch data for, across which all other query parameters will be the same. Supplying a single range is sufficient for most needs, but the flexibility is provided to ask for multiple at the same time'
          type: array
          items:
            type: object
            required:
              - period
            properties:
              period:
                description: 'There are several predefined period values at your disposal: ``today``, ``yesterday``, ``thisWeek``, ``lastWeek``, ``thisMonth``, ``lastMonth``, ``thisYear``, and ``lastYear``, with their obvious meanings. A week runs from Monday to Sunday. If you use a predefined period for a particular time range, the from and to fields of that time range will be ignored.
                <br>
                To use a ``custom`` period, you need to provide the start (from) and end (to) date (both inclusive, tenant timezone assumed) in the following format: ``YYYY-MM-DD``. The end date cannot be before the start one. '
                type: string
                enum:
                  - 'today'
                  - 'yesterda'
                  - 'thisWeek'
                  - 'lastWeek'
                  - 'thisMonth'
                  - 'lastMonth'
                  - 'thisYear'
                  - 'lastYear'
                  - 'custom'
              from:
                description: 'A start date (inclusive) for the custom period for which performance metrics are requested.'
                type: string
                format: date
              to:
                description: 'An end date (inclusive) for the custom period for which performance metrics are requested.'
                type: string
                format: date
        aggregate:
          description: 'Used in combination with the ``am:date`` dimension, it specifies the granularity/resolution of the time according to which the metrics data will be grouped in buckets.'
          type: string
          enum:
            - 'daily'
            - 'weekly'
            - 'quarterly'
            - 'monthly'
            - 'yearly'
        dimensions:
          type: array
          items:
            type: string
            description: 'A dimension is an attribute of each performance event, and is used for grouping your data. For example, the dimension `Country` indicates where a click originated from. The `Date` dimension indicates the date when a particular ad was viewed or clicked. It is also possible to make a report without dimensions; in this case, the total result is calculated.
            <br>
            <span>&#9888;</span><br>
            Date is a special dimension, in that you can specify the granularity of the timeseries breakdown. In other words, data is aggregated over units of time (such as days, weeks, months or years) when calculating metrics over it.
            '
            enum:
              - 'am:date'
              - 'am:adID'
              - 'am:categoryID'
              - 'am:regionID'
              - 'am:campaignID'
        metrics:
          type: array
          items:
            type: string
            description: 'Metrics are numeric values based on quantitative aggregations over dimensions’ values; every query requires at least one metric field to be requested. For example, the metric `Clicks` indicates the total number of clicks, while `ViewCTR` indicates the click-through rate for ads.'
            enum:
              - 'am:clicks'
              - 'am:impressions'
              - 'am:websiteClicks'
              - 'am:emails'
              - 'am:engagements'
              - 'am:viewCTR'
              - 'am:websiteCTR'
              - 'am:spentMicros'
              - 'am:engagementCTR'
              - 'am:avgBidMicros'
              - 'am::avgSpentMicros'
              - 'am:eSpentMicros'
              - 'am:sessionESpentMicros'
              - 'am:sessionsWithClicks'
              - 'am:sessionsWithImpressions'
              - 'am:sessionsWithWebsiteClicks'
              - 'am:sessionsWithEmails'
              - 'am:sessionsWithEngagements'
              - 'am:sessionViewCTR'
              - 'am:sessionWebsiteCTR'
              - 'am:sessionEngagementCTR'
        sorts:
          type: array
          description: 'To sort the resulting data, use the sorts top-level query field. Sorts is an array of sort clauses.'
          items:
            type: object
            properties:
              field:
                description: 'Either a valid metric or a valid dimension. It is only permitted to sort on the fields that are requested.'
                type: string
              direction:
                description: 'The sorting direction for the requested field.'
                type: string
                enum:
                  - 'asc'
                  - 'desc'
          example:
              - field: am:date
                direction: desc
              - field: am:adID
                direction: asc
        filters:
          description: 'Used to request a subset of data based on certain conditions. 
          For example, you can filter on particular category, region, or ad ID. Filters can currently be used on any of the supported dimensions (except for ``am:date``).
          In the request query, they should be provided as an array of filter clauses which filters out the requested data on particular field values.
          <br><br>
          Each filter in the list adds more restriction on the result, i.e., there is implicit AND operation between them. The only valid operator at the moment is the set operator in, and requires an array of values to be passed in the value field of the filter.
          '
          type: array
          items:
            type: object
            properties:
              field:
                description: 'The dimension field on whihc a filter is applied.'
                type: string
                enum:
                  - 'am:date'
                  - 'am:adID'
                  - 'am:categoryID'
                  - 'am:regionID'
                  - 'am:campaignID'
              operator:
                description: 'The only valid operator at the moment is ``in``.'
                type: string
                enum:
                  - 'in'
              value:
                description: 'The value(s) of the corresponding dimension field on which to filter.'
                type: array
                items:
                  type: number
                  format: double
          example:
            - field: am:adID
              operator: in
              value:
                - 1111
                - 2222
                - 3333
            - field: am:regionID
              operator: in
              value:
                - 1234
                - 5678
        enrichment:
          type: array
          items:
            description: 'It is possible to enrich the reports with “handy” ad-related data for which only the present-moment values are available, 
            such as the ad title, or category description. Requesting these fields makes sense only if ``am:adID`` is in the requested dimensions.'
            type: string
            enum:
              - 'am:currentAdTitle'
              - 'am:currentAdStartDate'
              - 'am:currentAdEndDate'
              - 'am:currentAdBidMicros'
              - 'am:currentAdCategoryL1'
              - 'am:currentAdCategoryL2'
              - 'am:currentAdCategoryL3'
              - 'am:currentAdImage'
              - 'am:currentAdVendorID'
              - 'am:currentAdRegion'
              - 'am:currentAdExternalID'
              - 'am:currentAdExternalURL'
        limit:
          description: 'Depending on the amount and shape of the requested data, it is worthwhile to paginate the results, for efficiency.
          This field limits of elements in the response, per time range.'
          type: number
          example: 100
        offset:
          description: 'Depending on the amount and shape of the requested data, it is worthwhile to paginate the results, for efficiency.
          This field is the index of the first row of the requested data (per time range).'
          type: number
          default: 0
        searchPhrase:
          description: 'String to match against an ad title.'
          type: string
          example: 'bike'
    MetricsDataResponseV2:
      readOnly: true
      type: object
      properties:
        data:
          type: array
          description: 'Contains an array of objects, one for each of the requested Time Ranges.
          It is important to remember that the order in which the ``metrics``, ``dimensions``, and ``enrichment`` fields are requested is the same order in which they are listed in the response.
          The order of the objects in the rows array is not guaranteed to be deterministic unless explicit sorting is used.'
          items:
            type: object
            properties:
              rows:
                type: array
                items:
                  type: object
                  properties:
                    dimensions:
                      description: 'Array of dimension values for this row, in string format.'
                      type: array
                      items:
                        type: string
                    metrics:
                      description: 'Array of metric values for this row, in number format.'
                      type: array
                      items:
                        type: number
                        format: double
                    enrichment:
                      description: 'Array of enrichment values for this row, in string format. Valid only if ``am:adID`` is in the requested dimensions.'
                      type: array
                      items:
                        type: string
              count:
                description: 'Actual number of rows returned.'
                type: number
    NotSupportedError:
      type: string
      example: 'Response type text/xml is not supported'
    ApiResponseError:
      type: object
      readOnly: true
      properties:
        code:
          type: integer
          format: int32
          example: 1009
        text:
          type: string
          example: 'internal error'
        msg:
          type: string
          example: 'The server encountered an error'
      example:
        code: '1000'
        text: 'internal error'
        msg: 'The server encountered an error'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 'https://www.api-test.dev/'
    oAuth2ClientCredentials:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: /accounts/oauth/authorize
          refreshUrl: /accounts/oauth/token
          tokenUrl: /accounts/oauth/token
          scopes:
            api_ro: Grants API read access
            api_rw: Grants API write access
            console_ro: Grants Console read access
            console_rw: Grants Console write access